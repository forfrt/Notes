
##Formally Proving Properties

1. To show a positive property we need to give a proof of security or reduction. For symmetric modes of operation this goes slightly beyond this course, but we can give intuition.
1. To show a negative property we need to give an attack within the appropriate game rules. Usually easier and this is part of the course!

#Definition

##Definition (Mallea bility)
A scheme is malleable if given a ciphertext C containing a message M it is
possible to compute a valid ciphertext on a message related to M without
needing to know M.

##Definition (Homomorphic)
A scheme is homomorphic if given ciphertexts c1 of m1 and c2 of m2 it is
possible to create ciphertext c3 of m1 ¡¤ m2.

#Theorem

a ¡Ê ZN has a unique inverse modulo N iffa and N are relatively prime, i.e.
gcd(a, N) = 1.

#Exercise

##IND-CPA must be probabilistic(for both symmetric and public key)

Because the adversary possesses the public encryption key in the above game, a semantically secure encryption scheme must by definition be probabilistic, possessing a component of randomness; if this were not the case, the adversary could simply **compute the deterministic encryption of m_0 and m_1 and compare these encryptions with the returned ciphertext c** to successfully guess the oracle's choice.

##Malleable schemes cannot be OW-CCA or IND-CCA secure

as the adversary can query the decryption oracle on the mauled ciphertext and learn the challenge plaintext

##A completely random permutation is not IND-CPA and IND-CCA
Cause it is deterministic

##ECB Mode is not IND-PASS
We can create an adversary which wins this game for ECB mo de, irrespective of the underlying blo ck cipher, in the following way

1. Select two distinct message blocks b1 and b2.
1. Set m0 = b1 | b2.
1. Set m1 = b2 | b2.
1. Output m0 and m1.
1. Receive the challenge ciphertext c* .
1. This will be a two block message, for which we denote the blocks by c1 and c2.
1. If c1 = c2 output 1 otherwise output 0

##ECB Mode is not OW-CCA

1. Assume m is a two block message.
1. So c* = c1 | c2
1. Compute using the oracle m1 = OD(c1)
1. Compute using the oracle m2 = OD(c2)
1. Output m 0 = m1 | m2.

##ECB Mode is OW-PASS and OW-CPA

Essentially if Ek is a perfect block cipher then it will act like a random permutation.

In the OW-PASS game we get a ciphertext, and are asked to find the plaintext.

But we have no oracles, so really we have no handle on the problem.

For the OW-CPA game we have an encryption oracle, but assuming the block size n is large enough we cannot enumerate all possible ciphertexts to see which one is correct.

##CBC Mode is IND-CPA

1. Intuitively this follows since the random IV produces a probabilistic scheme.
1. The IV acts as a one-time-pad *on the initial block*, which is therefore a random block
1. This is then encrypted, to produce another random value which is one-time-padded with the next block and so on.
1. The above can be formally proved to pro duce an IND-CPA scheme.







#Introduction

##Seven Pillars of Cryptology

1. Computer Science Basics
1. Algorithms
1. Complexity Theory
1. Algebra/Group Theory
1. Linear Algebra
1. Number Theory
1. (Discrete) Probability Theory

----

##private-key(or the symmetric-key)
The same key is used to convert the plaintext into a ciphertext and back.

> An implicit assumption in any system using private-key encryption is that the communicating parties have some way of initially sharing a key in a secret manner.

A private-key encryption scheme is comprised of three algorithms:
1. the key-generation algorithm.
2. The encryption algorithm
3. The decryption algorithm

- The set of all possible keys output by the key-generation algorithm is called the *key space*.
- The set of all "legal" messages is called plainttext space.

----

`The cipher method must not be required to be secret, and it must be able to fall into the hands of the enemy without inconvenience.--Kerckhoffs' principle`

That means an encryptography should be designed so as to be secure even if an adversary knows the details of all the component algorithms of the scheme.

    1. it is much easier for the parties to maintain secrecy of a short key than to maintain secrecy of an algorithm.
    1. much easier for the honest parties to change the key than to replace the algorithm being used.
    1. significantly easier for all parties to use the same algorithm/program, but different keys.

**now**

> not only advocating not relying on secrecy of the algorithms being used, but also demanding that these algorithms be made public.

    1. Published designs undergo public scrutiny and are therefore likely to be stronger.
    1. better for security flaws
    1. reverse engineering of the code would be a serious threat to security.
    1. enables the establishment of standards.

----

###Attack scenarios(Adversarial Powers)

1. Ciphertext-only attack(Passive)
1. Known-plaintext attack(Passive)

    the adversary learns one or more pairs of plaintexts/ciphertexts enccrypted under the same key.

1. Chosen-plaintext attck(CPA)(Active)

    has the ability to obtain the encryption of plaintexts of tis choice

1. Chosen-ciphertext attack(CCA)(Active)

    the capability to obtain the decryption of ciphertexts of its choice

----

##The Basic Principles of Modern Cryptography

Three principles that distinguish modern cryptography from 

1. Principle 1 -- the first step in solving any cryptographic problems the formulation of a rigorous and precise definition of security
1. Principle 2 -- the assumption must be precisely stated if the security of a cryptographic constrction relies on an unproven assumption.
1. Principle 3 -- cryptographic constructions should be

    - accompanied by a rigorous proof of security[aka a reduction]
    - with respect to a definition formulated according to principle 1
    - and relative to an assumption stated as in principle 2

###Modelling choices

Formal vs. Informal
- Informally, it's just an *effective description* (e.g. in pseudocode) of which steps to perform to get some job done.
- To be more formal, one needs to *fix the model of computation* and one typically *falls back to Turing machines*.

----

Concrete vs. Asymptotic
- For concrete security, we look at specific algorithms for, or adversaries against, a particular cryptosystem, e.g., where the key-size is fixed to 256 bits.
- For asymptotic security, we look at an infinite family of cryptosystems with a security parameter (e.g. the keysize) that can take any natural value. Algorithms are required to be polynomial time.

----

###Significant choices

Stateful vs. Stateless
Many algorithms, such as encryption, will be run time and again. If it can
depend on **what happened before** (e.g. by maintaining a counter), it is stateful. If the algorithms running is independent of previous uses, it is
stateless.

----

Probabilistic vs. Deterministic
- A deterministic (stateless) algorithm always gives *the same input for the same output*.
- For a probabilistic algorithm is allowed to *fip coins* etc. during its computation. Each time it runs can be different, even on identical inputs. We can make the randomness explicit by denoting it r and writing Enc k (m; r).

> probabilistic algorithms are not non-deterministic ones.

****

##Security notion

###IND-Security(indistinguaishability)

The adversary is not able to guess in polynomial-time even a bit of the plain-text knowing the cipher-text , notion introduced by S. Goldwasser and S.Micali ([GM84]).

----

###One way Security

Without the private key, it is computationally impossible to recover the plain-text . (Near of Perfect Security of Shannon)

----

###SIM(simulation-based security definition)

####SIM-CPA

####SIM-CCA
Real world experiment:

1. In the case of private-key encryption, Alice and Bob share a key k chosen according to the encryption scheme's key generation algorithm \mathsf{KeyGen}. In the case of public-key encryption, Bob generates a public-key/private-key pair, so that the public-key k is made available to both Alice and the adversary.
1. Repeatedly do:

    1. The adversary Eve arbitrarily interacts with the environment (i.e, to influence its choice of message in the next step), and also sends *ciphertexts* of its choice to Bob. If Bob has not previously received this ciphertext from Alice, he decrypts it (using the shared key or his private key) and sends it to the environment.
    1. The environment sends a message m to Alice.
    1. Alice sends *\mathsf{Enc}_k(m)* to Bob, and Eve also receives a copy. Bob decrypts it and sends it to the environment. 

1. The environment outputs a bit (whether Eve caused a particular observable effect on the environment). 

The adversary is said to "succeed" in the experiment if the environment outputs 1. 

----

Ideal world experiment:

1. Repeatedly do:

    1. The adversary Eve arbitrarily interacts with the environment, and also sends *(plaintext)* messages of its choice to Bob. Bob relays these messages to the environment.
    1. The environment sends a message m to Alice.
    1. Alice sends the *message m* to Bob through a secure channel. Bob sends it to the environment.
    1. Eve receives notification that a message was sent through the channel. (Here we assume that the messages come from a finite message space. Otherwise, Eve is notified the length of the message as well.) Eve continues to arbitrarily interact with the environment. 

1. The environment outputs a bit (whether Eve caused a particular observable effect -- same as above -- on the environment). 

The adversary is said to "succeed" in the experiment if the environment outputs 1. 

----

For all real-world adversaries A, there exists an ideal-world adversary A', such that for all environments, the success probabilities in these two experiments differ by a negligible amount (in the scheme's security parameter). 

**SIM-CCA is a stronger definition in secrecy than IND-CCA.**

----

####SIM-onetime

Real world experiment:

1. The adversary Eve arbitrarily interacts with the environment (i.e, to influence its choice of message in the next step).
1. The environment sends a message m to Alice.
1. Alice sends an encryption of m to Bob according to the encryption scheme. In particular, they must already share a key, chosen randomly as prescribed in the definition of the encryption scheme.
1. Eve receives a copy of the ciphertext, and then arbitrarily interacts with the environment (to influence the behavior of the environment).
1. The environment outputs a bit (whether Eve caused a particular observable effect on the environment). 

The adversary is said to "succeed" in the experiment if the environment outputs 1. 

----

Ideal world experiment:

1. The adversary Eve arbitrarily interacts with the environment.
1. The environment sends a message m to Alice.
1. Alice sends the message m to Bob through a secure channel.
1. Eve does not receive a copy of the ciphertext, but continues to arbitrarily interact with the environment.
1. The environment outputs a bit (whether Eve caused a particular observable effect -- same as above -- on the environment). 

The adversary is said to "succeed" in the experiment if the environment outputs 1. 

----

For all real-world adversaries A, there exists an ideal-world adversary A', such that for all environments, the success probabilities in these two experiments are the *same*. 

**equivalent to perfect secrecy**

It is convenient to interpret this definition in the following way:
> for all ways to "do something malicious" in the presence of the encryption scheme (i.e, an adversary A,), there is another way to do the same malicious thing (i.e, the corresponding A'\,) without looking at the ciphertext at all! 

----

One can mix-and-match the goals [ IND,OW ] and attacks [ CPA,CCA1,CCA2 ] in any combination,given rise to six notions of security.

    IND-CCA IND-CPA IND-PASS
    OW-CCA OW-CPA OW-PASS

----

The strongest notion we have seen is *IND-CCA*:
- All modern ciphers must provably meet this definition of security.
- Hence encryption must be *probabilistic*.
- Any IND-CCA algorithm must expand the message space into the ciphertext space.
- Encryption is a one-to-many "function"
- 
> Very modern symmetric ciphers often use stronger and more advanced notions than IND-CCA

****

#Week5

##Blockcipher



#Some basic knowledge of Modern Cryptology

##Probability Primer

A random variable X is a variable which takes certain values with certain probabilities.

The joint probability is defined as p ( X = x ; Y = y) is the probability that X takes the value x and Y takes the value y .

X and Y are independent iff

    p(X = x ; Y = y ) = p(X = x ) * p(Y = y ) for all values of x and y .
    X and Y are independent iff p(X = x |Y = y ) = p(X = x )


The conditional probability is defined as p(X = x |Y = y ) is the probability that X takes the value x given that Y takes the value y .

    p(X = x ; Y = y ) = p(X = x |Y = y ) * p(Y = y )

    If p(Y = y ) > 0 then
    p(X = x |Y = y)=(p( Y = y |X = x)*p(X = x))/p(Y = y)

----

##Perfect Secrecy

A cryptosystem has *perfect secrecy* iff

    p(M = m|C = c ) = p(M = m):

so

    p(C = c|M = m) = p(C = c);
    P(C = c|M = m0) = p(C = c|M = m1);      //!perfect indistinguishability

----

##Shannon's Theorem

Suppose (M; C; K; Kg; Enc; Dec) is a cryptosystem with |M| = |C| = |K|.

This cryptosystem provides *perfect secrecy* if and only if every key is used
with equal probability 1=|K| and, for each m belongs to M and c belongs to C, there is a unique key k such that Enc k(m) = c 

****

#MAC

1. Encryption provides confidentiality.

    Encryption does not necessarily provide integrity of data !

1. Use cryptographic function to get a check-value and send it with data.

    Message Authentication Codes (MAC).

----

##






#¼ÆËã»úÊ±´úµÄÃÜÂëÑ§

ÐÂ¼ÓÃÜ·¨ÊÇ»ùÓÚ¼ÆËã»úµÄÌØÕ÷¶ø²»ÊÇÓïÑÔ½á¹¹.
ÐÂÃÜÂë·¨Éè¼ÆÓëÊ¹ÓÃµÄ½¹µã·ÅÔÚ¶þ½øÖÆ¶ø²»ÊÇ×ÖÄ¸ÉÏ.

##¼ÆËã»úµÄÌØÕ÷

¼ÆËã»ú¼¼Êõ´øÀ´µÄ»ù±¾¸Ä±äÊÇÐÅÏ¢µÄ±íÊ¾·½Ê½

##Xor¼ÆËãÓëOne Time Pad

Èç¹ûÁ½¸öÊäÈë²»Í¬,ÔòÊä³öÎª1.

One Time Pad: ÃÜÔ¿µÄ¶þ½øÖÆÎ»ÓëÃÜÎÄµÄ¶þ½øÖÆÎ»½øÐÐXORÂß¼­ÔËËã

##Á÷¼ÓÃÜ·¨

½«Ã÷ÎÄÓëËæ»úÃÜÔ¿Á÷½øÐÐXORÂß¼­ÔËËã
¿ª·¢Ò»¸ö»ùÓÚ¶ÌµÄÃÜÔ¿À´²úÉúÃÜÔ¿Á÷µÄËæ»úÎ»Éú³ÉÆ÷,

1. Í¬²½Éú³ÉÆ÷,Éú³ÉµÄÃÜÔ¿Á÷ÓëÃ÷ÎÄÁ÷ÎÞ¹Ø,¶ªÊ§Ò»¸öÃÜÎÄ×Ô¸º,ÃÜÎÄÓëÃÜÔ¿Á÷½«ÎÞ·¨¶ÔÆä
1. ×ÔÍ¬²½Á÷,¸ù¾ÝÇ°¼¸¸öÃÜÔ¿×Ô¸ºÀ´Éú³ÉÃÜÔ¿Á÷,Èç¹ûÄ³¸öÃÜÎÄ×Ö·ûÓÐ´í,n¸öÃÜÎÄ×Ö·ûºóÃÜÔ¿Á÷»á×Ô¶¯Í¬²½

###ÏßÐÔ·´À¡ÒÆÎ»¼Ä´æÆ÷





#·Ö¿é¼ÓÃÜBlock Cipher

##¿éÃÜÂëµÄ¹¤×÷Ä£Ê½

    ÃÜÂëÑ§ÖÐ£¬¿éÃÜÂëµÄ¹¤×÷Ä£Ê½ÔÊÐíÊ¹ÓÃÍ¬Ò»¸ö¿éÃÜÂëÃÜÔ¿¶Ô¶àÓÚÒ»¿éµÄÊý¾Ý½øÐÐ¼ÓÃÜ£¬²¢±£Ö¤Æä°²È«ÐÔ¡£[1][2] ¿éÃÜÂë×ÔÉíÖ»ÄÜ¼ÓÃÜ³¤¶ÈµÈÓÚÃÜÂë¿é³¤¶ÈµÄµ¥¿éÊý¾Ý£¬ÈôÒª¼ÓÃÜ±ä³¤Êý¾Ý£¬ÔòÊý¾Ý±ØÐëÏÈ±»»®·ÖÎªÒ»Ð©µ¥¶ÀµÄÃÜÂë¿é¡£Í¨³£¶øÑÔ£¬×îºóÒ»¿éÊý¾ÝÒ²ÐèÒªÊ¹ÓÃºÏÊÊÌî³ä·½Ê½½«Êý¾ÝÀ©Õ¹µ½·ûºÏÃÜÂë¿é´óÐ¡µÄ³¤¶È¡£Ò»ÖÖ¹¤×÷Ä£Ê½ÃèÊöÁË¼ÓÃÜÃ¿Ò»Êý¾Ý¿éµÄ¹ý³Ì£¬²¢³£³£Ê¹ÓÃ»ùÓÚÒ»¸öÍ¨³£³ÆÎª³õÊ¼»¯ÏòÁ¿µÄ¸½¼ÓÊäÈëÖµÒÔ½øÐÐËæ»ú»¯£¬ÒÔ±£Ö¤°²È«[1]¡£

    ¹¤×÷Ä£Ê½Ö÷ÒªÓÃÀ´½øÐÐ¼ÓÃÜºÍÈÏÖ¤¡£[1][3] ¶Ô¼ÓÃÜÄ£Ê½µÄÑÐ¾¿Ôø¾­°üº¬Êý¾ÝµÄÍêÕûÐÔ±£»¤£¬¼´ÔÚÄ³Ð©Êý¾Ý±»ÐÞ¸ÄºóµÄÇé¿öÏÂÃÜÂëµÄÎó²î´«²¥ÌØÐÔ¡£ºóÀ´µÄÑÐ¾¿Ôò½«ÍêÕûÐÔ±£»¤×÷ÎªÁíÒ»¸öÍêÈ«²»Í¬µÄ£¬Óë¼ÓÃÜÎÞ¹ØµÄÃÜÂëÑ§Ä¿±ê¡£²¿·ÖÏÖ´úµÄ¹¤×÷Ä£Ê½ÓÃÓÐÐ§µÄ·½·¨½«¼ÓÃÜºÍÈÏÖ¤½áºÏÆðÀ´£¬³ÆÎªÈÏÖ¤¼ÓÃÜÄ£Ê½¡£[2]

    ËäÈ»¹¤×÷Ä£Ê½Í¨³£Ó¦ÓÃÓÚ¶Ô³Æ¼ÓÃÜ[2]£¬ËüÒà¿ÉÒÔÓ¦ÓÃÓÚ¹«Ô¿¼ÓÃÜ£¬ÀýÈçÔÚÔ­ÀíÉÏ¶ÔRSA½øÐÐ´¦Àí£¬µ«ÔÚÊµÓÃÖÐ£¬¹«Ô¿ÃÜÂëÑ§Í¨³£²»ÓÃÓÚ¼ÓÃÜ½Ï³¤µÄÐÅÏ¢£¬¶øÊÇÊ¹ÓÃ»ìºÏ¼ÓÃÜ·½°¸

----

- µç×ÓÃÜÂë±¾£¨ECB£©
- ÃÜÂë¿éÁ´½Ó£¨CBC£©£ºÔÚCBCÄ£Ê½ÖÐ£¬Ã¿¸öÆ½ÎÄ¿éÏÈÓëÇ°Ò»¸öÃÜÎÄ¿é½øÐÐÒì»òºó£¬ÔÙ½øÐÐ¼ÓÃÜ¡£ÔÚÕâÖÖ·½·¨ÖÐ£¬Ã¿¸öÃÜÎÄ¿é¶¼ÒÀÀµÓÚËüÇ°ÃæµÄËùÓÐÆ½ÎÄ¿é¡£Í¬Ê±£¬ÎªÁË±£Ö¤Ã¿ÌõÏûÏ¢µÄÎ¨Ò»ÐÔ£¬ÔÚµÚÒ»¸ö¿éÖÐÐèÒªÊ¹ÓÃ³õÊ¼»¯ÏòÁ¿¡£
- Ìî³äÃÜÂë¿éÁ´½Ó£¨PCBC£©
- ÃÜÎÄ·´À¡£¨CFB£©
- Êä³ö·´À¡£¨OFB£©
- ¼ÆÊýÆ÷Ä£Ê½£¨CTR£©

##³õÊ¼»¯ÏòÁ¿£¨IV£©

    ³õÊ¼»¯ÏòÁ¿£¨IV£¬Initialization Vector£©ÊÇÐí¶à¹¤×÷Ä£Ê½ÖÐÓÃÓÚËæ»ú»¯¼ÓÃÜµÄÒ»¿éÊý¾Ý£¬Òò´Ë¿ÉÒÔÓÉÏàÍ¬µÄÃ÷ÎÄ£¬ÏàÍ¬µÄÃÜÔ¿²úÉú²»Í¬µÄÃÜÎÄ£¬¶øÎÞÐèÖØÐÂ²úÉúÃÜÔ¿£¬±ÜÃâÁËÍ¨³£Ïàµ±¸´ÔÓµÄÕâÒ»¹ý³Ì¡£

    ³õÊ¼»¯ÏòÁ¿ÓëÃÜÔ¿Ïà±ÈÓÐ²»Í¬µÄ°²È«ÐÔÐèÇó£¬Òò´ËIVÍ¨³£ÎÞÐë±£ÃÜ£¬È»¶øÔÚ´ó¶àÊýÇé¿öÖÐ£¬²»Ó¦µ±ÔÚÊ¹ÓÃÍ¬Ò»ÃÜÔ¿µÄÇé¿öÏÂÁ½´ÎÊ¹ÓÃÍ¬Ò»¸öIV¡£¶ÔÓÚCBCºÍCFB£¬ÖØÓÃIV»áµ¼ÖÂÐ¹Â¶Æ½ÎÄÊ×¸ö¿éµÄÄ³Ð©ÐÅÏ¢£¬Òà°üÀ¨Á½¸ö²»Í¬ÏûÏ¢ÖÐÏàÍ¬µÄÇ°×º¡£¶ÔÓÚOFBºÍCTR¶øÑÔ£¬ÖØÓÃIV»áµ¼ÖÂÍêÈ«Ê§È¥°²È«ÐÔ¡£ÁíÍâ£¬ÔÚCBCÄ£Ê½ÖÐ£¬IVÔÚ¼ÓÃÜÊ±±ØÐëÊÇÎÞ·¨Ô¤²âµÄ£»ÌØ±ðµÄ£¬ÔÚÐí¶àÊµÏÖÖÐÊ¹ÓÃµÄ²úÉúIVµÄ·½·¨£¬ÀýÈçSSL2.0Ê¹ÓÃµÄ£¬¼´²ÉÓÃÉÏÒ»¸öÏûÏ¢µÄ×îºóÒ»¿éÃÜÎÄ×÷ÎªÏÂÒ»¸öÏûÏ¢µÄIV£¬ÊÇ²»°²È«µÄ[12]¡£

----

##Ìî³ä

    ¿éÃÜÂëÖ»ÄÜ¶ÔÈ·¶¨³¤¶ÈµÄÊý¾Ý¿é½øÐÐ´¦Àí£¬¶øÏûÏ¢µÄ³¤¶ÈÍ¨³£ÊÇ¿É±äµÄ¡£Òò´Ë²¿·ÖÄ£Ê½£¨¼´ECBºÍCBC£©ÐèÒª×îºóÒ»¿éÔÚ¼ÓÃÜÇ°½øÐÐÌî³ä¡£ÓÐÊýÖÖÌî³ä·½·¨£¬ÆäÖÐ×î¼òµ¥µÄÒ»ÖÖÊÇÔÚÆ½ÎÄµÄ×îºóÌî³ä¿Õ×Ö·ûÒÔÊ¹Æä³¤¶ÈÎª¿é³¤¶ÈµÄÕûÊý±¶£¬µ«±ØÐë±£Ö¤¿ÉÒÔ»Ö¸´Æ½ÎÄµÄÔ­Ê¼³¤¶È£»ÀýÈç£¬ÈôÆ½ÎÄÊÇCÓïÑÔ·ç¸ñµÄ×Ö·û´®£¬ÔòÖ»ÓÐ´®Î²»áÓÐ¿Õ×Ö·û¡£ÉÔÎ¢¸´ÔÓÒ»µãµÄ·½·¨ÔòÊÇÔ­Ê¼µÄDESÊ¹ÓÃµÄ·½·¨£¬¼´ÔÚÊý¾ÝºóÌí¼ÓÒ»¸ö1Î»£¬ÔÙÌí¼Ó×ã¹»µÄ0Î»Ö±µ½Âú×ã¿é³¤¶ÈµÄÒªÇó£»ÈôÏûÏ¢³¤¶È¸ÕºÃ·ûºÏ¿é³¤¶È£¬ÔòÌí¼ÓÒ»¸öÌî³ä¿é¡£×î¸´ÔÓµÄÔòÊÇÕë¶ÔCBCµÄ·½·¨£¬ÀýÈçÃÜÎÄÇÔÈ¡£¬²Ð¿éÖÕ½áµÈ£¬²»»á²úÉú¶îÍâµÄÃÜÎÄ£¬µ«»áÔö¼ÓÒ»Ð©¸´ÔÓ¶È¡£²¼Â³Ë¹¡¤Ê©ÄÎ¶ûºÍÄá¶ûË¹¡¤¸¥¸ñÉ­Ìá³öÁËÁ½ÖÖ¼òµ¥µÄ¿ÉÄÜÐÔ£ºÌí¼ÓÒ»¸öÖµÎª128µÄ×Ö½Ú£¨Ê®Áù½øÖÆµÄ80£©£¬ÔÙÒÔ0×Ö½ÚÌîÂú×îºóÒ»¸ö¿é£»»òÏò×îºóÒ»¸ö¿éÌî³än¸öÖµ¾ùÎªnµÄ×Ö½Ú[13]¡£

    CFB£¬OFBºÍCTRÄ£Ê½²»ÐèÒª¶Ô³¤¶È²»ÎªÃÜÂë¿é´óÐ¡ÕûÊý±¶µÄÏûÏ¢½øÐÐÌØ±ðµÄ´¦Àí¡£ÒòÎªÕâÐ©Ä£Ê½ÊÇÍ¨¹ý¶Ô¿éÃÜÂëµÄÊä³öÓëÆ½ÎÄ½øÐÐÒì»ò¹¤×÷µÄ¡£×îºóÒ»¸öÆ½ÎÄ¿é£¨¿ÉÄÜÊÇ²»ÍêÕûµÄ£©ÓëÃÜÔ¿Á÷¿éµÄÇ°¼¸¸ö×Ö½ÚÒì»òºó£¬²úÉúÁËÓë¸ÃÆ½ÎÄ¿é´óÐ¡ÏàÍ¬µÄÃÜÎÄ¿é¡£Á÷ÃÜÂëµÄÕâ¸öÌØÐÔÊ¹µÃËüÃÇ¿ÉÒÔÓ¦ÓÃÔÚÐèÒªÃÜÎÄºÍÆ½ÎÄÊý¾Ý³¤¶ÈÑÏ¸ñÏàµÈµÄ³¡ºÏ£¬Ò²¿ÉÒÔÓ¦ÓÃÔÚÒÔÁ÷ÐÎÊ½´«ÊäÊý¾Ý¶ø²»±ãÓÚ½øÐÐÌî³äµÄ³¡ºÏ¡£

----

##


##Blowfish

###S-box (Substitution-box,Ìæ»»ºÐ)

ÔÚ·Ö¿éÃÜÂëÖÐ£¬S-boxÍ¨³£±»ÓÃÀ´ÑÚ¸ÇÃÜÔ¿ºÍÃÜÎÄÖ®¼äµÄ¹ØÏµ¡£

----

###Ëã·¨ËµÃ÷

BlowFish Ê¹ÓÃÁËÁ½¸öbox,³ýÁËÖøÃûµÄS-box£¬»¹ÓÐÒ»¸öp-box

- pboxÓÐ18¸öunsigned longÔªËØ
- sboxÓÐ4¡Á256¸öunsigned longÔªËØ

BlowFishËã·¨ÖÐ£¬ÓÐÒ»¸öºËÐÄ¼ÓÃÜº¯Êý£¬¸Ãº¯ÊýÊäÈë64Î»ÐÅÏ¢£¬ÔËËãºó£¬ ÒÔ64Î»ÃÜÎÄµÄÐÎÊ½Êä³ö¡£ ÓÃBlowFishËã·¨¼ÓÃÜÐÅÏ¢£¬ÐèÒªÁ½¸ö¹ý³Ì£º

1.ÃÜÔ¿Ô¤´¦Àí
2.ÐÅÏ¢¼ÓÃÜ

----

####ÃÜÔ¿Ô¤´¦Àí

BlowFishËã·¨µÄÔ´ÃÜÔ¿¡ª¡ªpboxºÍsboxÊÇ¹Ì¶¨µÄ¡£´ËpboxºÍsboxµÄÖµÀ´×ÔPIµÄÊ®Áù½øÖÆÊý×ÖÖµ£¬Ê¹ÓÃÕâÐ©ÊýµÄÔ­ÒòÊÇÕâÐ©Êý¿´²»³öÓÐÊ²Ã´Ã÷ÏÔµÄ¹æÂÉ¡£(PI)

ÎÒÃÇÒª¼ÓÃÜÒ»¸öÐÅÏ¢£¬ÐèÒª×Ô¼ºÑ¡ÔñÒ»¸ökey£¬ÓÃÕâ¸ökey¶ÔpboxºÍsbox½øÐÐ±ä»»£¬µÃµ½ÏÂÒ»²½ÐÅÏ¢¼ÓÃÜËùÒªÓÃµÄpboxºÍsbox¡£

¾ßÌåµÄ±ä»¯Ëã·¨ÈçÏÂ£º

1. ÓÃÔ­sbox: ORIG_S Ìî³ä sbox
1. È»ºó£¬Ã¿´ÎÈ¡keyÓëdata½øÐÐÔËËã£¬ÔËËãºóµÄ½á¹ûËÍ¸øpbox

    ÔËËã¹ý³ÌÊÇÕâÑùµÄ£º
    1. ½øÐÐN+2´ÎÔËËã£¨N=16),Áî32Î»ÎÞ·ûºÅdataÎª0,ÓÉÓÚKeyÊÇunsigned charÀàÐÍµÄ£¬Ã¿´Î¶Ôdata×óÒÆ8Î»(Ò»¸ö×Ö½Ú)Ö®ºóÓëÏàÓ¦µÄkeyÏà»ò£¨¼´Ïà¼Ó£©£¬µ±key³¤¶ÈÐ¡ÓÚ4Ê±£¬Ñ­»·Ê¹ÓÃKey¡£
    1. ½ÓÏÂÀ´£¬ÓÃbf_encypt¼ÓÃÜÒ»¸öÈ«0µÄ64Î»ÐÅÏ¢£¨·ÖÎªdatalºÍdatar,¸÷32Î»£©ÓÃÊä³öµÄ½á¹ûdatalºÍdatar·Ö±ðÌæ»»pbox[0]ºÍpbox[1]
    1. È»ºó£¬¼ÌÐø¼ÓÃÜdatalºÍdatar,ÓÃÊä³ö½á¹ûÌæ»»pbox[2]ºÍpbox[3]
    1. ¡­¡­
    1. ÕâÑùÑ­»·18´Î£¬°ÑpboxÈ«²¿Ìæ»»Íê³É¡£

1. ½ÓÏÂÀ´ÊÇ¶ÔsboxµÄÌæ»»ÁË¡£

    Õâ´Î×Ü¹²ÊÇÑ­»·4¡Á256´Î£¬Ã¿´ÎÑ­»·µÄ¹ý³ÌÓëÉÏÃæµÄÒ»Ñù¡£²»¹ýÕâÀïÓÃµÄdatalºÍdatar¾ÍÊÇÉÏÃæÔËËã¹ýºóµÄdatalºÍdatar.

----

####ÐÅÏ¢¼ÓÃÜ

°Ñ64Î»µÄÃ÷ÎÄ·ÖÎªlºÍr½øÐÐ16ÂÖÔËËã£º

- Áîi=0,1,2,3,¡­,N-1
- Xl = Xl ^ ctx->P[i];
- Xr = F(ctx, Xl) ^ Xr;
- Èôi<N,½»»»XlºÍXrµÄÖµ¼ÌÐø×öÉÏÊöÔËËã¡£

16ÂÖÔËËãÍêÁËÖ®ºó£¬ÔÙ×öÒ»´ÎXlÓëXrµÄ½»»»£¬ÒòÎªµÚ16´ÎÔËËãÍêÁËÖ®ºó£¬Êµ¼ÊÉÏ
Ã»ÓÐÔÙ×öÔËËãÁË£¬µ«ÊÇXlÓëXr»¹ÊÇ½»»»ÁË£¬Òò´Ë£¬µÃ»»»ØÀ´¡£

È»ºó£¬Xr = Xr ^ ctx->P[N];
Xl = Xl ^ ctx->P[N + 1];
ÏÖÔÚµÄXlºÍXr¾ÍÊÇ¼ÓÃÜºóµÄÊý¾ÝÁË¡£

----

####ÂÖº¯ÊýF

F=(((S[1,a]+S[2,b]%0xFFFFFFFF)^S[3,c]+S[4,d])%0xFFFFFF

Ëü½ÓÊÕÒ»¸ö32Î»µÄÊý¾Ý£¬È»ºó´Ó¸ßÎ»µ½µÍÎ»·ÖÎªËÄ¶Î£¬Ã¿¶Î8Î»£¬ÒÀ´Î¸øa,b,c,d
È¡sbox[0][a]+sbox[1][b]£¬Ïà¼ÓºóµÄ½á¹ûÔÙÓësbox[2][c]×öÒì»òÔËËã£¬µÃ³öµÄ½á¹ûÔÙ¼ÓÉÏsbox[3][d]
ÓÉÓÚsboxµÄÔªËØ¶¼ÊÇ32Î»µÄ£¬Òò´Ë£¬F±ä»»ºóµÄÊä³öÒ²ÊÇ32Î»µÄ¡£

----

####½âÃÜº¯Êý
¿ÉÒÔ¿´µ½½âÃÜº¯ÊýÓë¼ÓÃÜº¯Êý·Ç³£µÄÏàËÆ£¬Ö»ÊÇ°Ñp0,p1,¡­,p17 ÄæÐòÊ¹ÓÃ£º

----

###blowfish¼ÓÃÜËã·¨ÐÔÄÜ·ÖÎö

****

#ÊýÑ§»ù´¡

##¸ÅÂÊÂÛÓëÐÅÏ¢ÂÛ

Ò»¸öÈÎÒâÈ·¶¨µÄµãµÄ¼¯ºÏ,³ÆÎª¸ÅÂÊ¿Õ¼ä(Ñù±¾¿Õ¼ä)S

ÈÎÒâÔªËØx
