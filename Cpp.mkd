#C99

#Table of Content


<!-- vim-markdown-toc GFM -->

* [头文件与源文件](#头文件与源文件)
* [头文件如何关联源文件](#头文件如何关联源文件)
    * [规范](#规范)
* [Runtime vs Compile time](#runtime-vs-compile-time)
* [`#include`](#include)
        * [include <file>和#include“file”有什么不同?](#include-file和includefile有什么不同)
* [Array](#array)
* [**Function**](#function)
    * [值传递](#值传递)
    * [指针传递](#指针传递)
    * [引用传递](#引用传递)
    * [return](#return)
    * [Const member functions in C++](#const-member-functions-in-c)
* [intptr_t,uintptr_t](#intptr_tuintptr_t)
* [**Pointer**](#pointer)
    * [Dangling Pointer&Wild Pointer](#dangling-pointerwild-pointer)
    * [Wild Pointer成因](#wild-pointer成因)
    * [NULL](#null)
* [析构函数](#析构函数)
    * [析构函数调用次序](#析构函数调用次序)
    * [显式析构函数调用](#显式析构函数调用)
    * [Virtual Destructor](#virtual-destructor)
* [new,delete operator](#newdelete-operator)
    * [new operator](#new-operator)
    * [delete operator](#delete-operator)
    * [operator new](#operator-new)
    * [Placement new](#placement-new)
    * [operator delete](#operator-delete)
    * [operator new[]](#operator-new-1)
    * [operator delete[]](#operator-delete-1)
    * [与malloc&free](#与mallocfree)
        * [malloc](#malloc)
        * [free](#free)
* [CV type qualifiers](#cv-type-qualifiers)
    * [Explanation](#explanation)
* [explicit](#explicit)
* [friend](#friend)
* [Templates](#templates)
    * [Function Templates](#function-templates)
    * [Class templates](#class-templates)
    * [Template Specialization](#template-specialization)
        * [模板的声明](#模板的声明)
        * [全特化](#全特化)
        * [特化的歧义](#特化的歧义)
        * [偏特化](#偏特化)
        * [Another Example](#another-example)
    * [Variadic Templates](#variadic-templates)
        * [Basic Example](#basic-example)
* [Virtual](#virtual)
    * [动态联编与静态联编](#动态联编与静态联编)
    * [Virtual Function](#virtual-function)
    * [Virtual Table](#virtual-table)
    * [struct](#struct)
        * [位域](#位域)
    * [extern](#extern)
    * [extern "C"](#extern-c)
        * [extern "C" 使用要点](#extern-c-使用要点)
    * [extern 函数](#extern-函数)
    * [static](#static)
        * [Static Variable](#static-variable)
        * [Static Function in C](#static-function-in-c)
        * [Static Function in Cpp](#static-function-in-cpp)
* [Using](#using)
    * [Using declaration](#using-declaration)
    * [Explanation](#explanation-1)
    * [In namespace and block scope](#in-namespace-and-block-scope)
* [In class definition](#in-class-definition)
* [constexpr specifier](#constexpr-specifier)
    * [constexpr初探](#constexpr初探)
    * [constexpr函数的限制](#constexpr函数的限制)
    * [constexpr和运行时](#constexpr和运行时)
    * [编译时使用对象](#编译时使用对象)
    * [constexpr vs const](#constexpr-vs-const)
    * [constexpr和浮点数](#constexpr和浮点数)
    * [权衡constexpr](#权衡constexpr)
* [inline](#inline)
    * [关于`#define`](#关于define)
    * [如何告诉编译器使非成员函数成为内联函数？](#如何告诉编译器使非成员函数成为内联函数)
    * [如何告诉编译器使一个成员函数成为内联函数？](#如何告诉编译器使一个成员函数成为内联函数)
    * [其它方法告诉编译器使成员函数成为内联](#其它方法告诉编译器使成员函数成为内联)
    * [在定义于类外部的内联函数中，以下哪种方法最好：是把inline关键字放在类内部的成员函数声明前呢，还是放到类外部函数的定义前呢，还是两个地方都写？](#在定义于类外部的内联函数中以下哪种方法最好是把inline关键字放在类内部的成员函数声明前呢还是放到类外部函数的定义前呢还是两个地方都写)
* [预处理](#预处理)
    * [`#define`](#define)
        * [特殊的`#define`](#特殊的define)
    * [`#undef`](#undef)
    * [`#typedef`](#typedef)
* [Lambda expressions](#lambda-expressions)
    * [Syntax](#syntax)
    * [Explanation](#explanation-2)
    * [Generic Lambda](#generic-lambda)
* [Gcc](#gcc)
    * [Delaring Attributes of Functions](#delaring-attributes-of-functions)
        * [alias](#alias)
        * [aligned](#aligned)
        * [`nonnull(arg-index, ...)`](#nonnullarg-index-)
* [设计模式](#设计模式)
    * [RAII](#raii)
        * [RAII与STL容器](#raii与stl容器)

<!-- vim-markdown-toc -->

# 头文件与源文件

简单的说, 要理解C文件与头文件有什么不同, 首先需要明白编译器的工作过程.

1. 预处理
2. 词法与语法分析阶段
3. 编译阶段, 首先变异成纯汇编语句, 再将之汇编成跟CPU相关的二进制码, 生成各个目标文件(.obj文件)
4. 链接阶段, 将各个目标文件中的各段代码进行绝对地址定位, 生成跟特定平台相关的可执行文件, 当然, 最后还可以用objcopy生成纯二进制码

编译器在编译时是以C文件为单位进行的，也就是说如果你的项目中一个C文件都没有，那么你的项目将无法编译，连接器是以目标文件为单位，它将一个或多个目标文件进行函数与变量的重定位，生成最终的可执行文件，在PC上的程序开发，一般都有一个main函数，这是各个编译器的约定，当然，你如果自己写连接器脚本的话，可以不用main函数作为程序入口！！！！

1. 预处理阶段：编译器以C文件作为一 个单元，首先读这个C文件，发现第一句与第二句是包含一个头文件，就会在所有搜索路径中寻找这两个文件，找到之后，就会将相应头文件中再去处理宏，变量， 函数声明，嵌套的头文件包含等，检测依赖关系，进行宏替换，看是否有重复定义与声明的情况发生，最后将那些文件中所有的东东全部扫描进这个当前的C文件 中，形成一个中间“C文件”
2. 编译阶段，在上一步中相当于将那个头文件中的test变量扫描进了一个中 间C文件，那么test变量就变成了这个文件中的一个全局变量，此时就将所有这个中间C文件的所有变量，函数分配空间，将各个函数编译成二进制码，按照特 定目标文件格式生成目标文件，在这种格式的目标文件中进行各个全局变量，函数的符号描述，将这些二进制码按照一定的标准组织成一个目标文件
3. 连接阶段，将上一步成生的各个目标文件，根据一些参数，连接生成最终的可 执行文件，主要的工作就是重定位各个目标文件的函数，变量等，相当于将个目标文件中的二进制码按一定的规范合到一个文件中

----

理论上来说C文件与头文件里的内容，只要是C语言所支持的，无论写什么都可以的，比如你在头文件中写函数体，只要在任何一个C文件包含此头文 件就可以将这个函数编译成目标文件的一部分（编译是以C文件为单位的，如果不在任何C文件中包含此头文件的话，这段代码就形同虚设），你可以在C文件中进 行函数声明，变量声明，结构体声明，这也不成问题！！！那为何一定要分成头文件与C文件呢？又为何一般都在头件中进行函数，变量声明，宏声明，结构体声明 呢？而在C文件中去进行变量定义，函数实现呢？？原因如下： 

1. 如果在头文件中实现一个函数体，那么如果在多个C文件中引用它，而且又同时编 译多个C文件，将其生成的目标文件连接成一个可执行文件，在每个引用此头文件的C文件所生成的目标文件中，都有一份这个函数的代码，如果这段函数又没有定义成局部函数，那么在连接时，就会发现多个相同的函数，就会报错 
1. 如果在头文件中定义全局变量，并且将此全局变量赋初值，那么在多个引用此头文件的C文件中同样存在相同变量名的拷贝，关键是此变量被赋了初值，所以编译器就会将此变量放入DATA段，最终在连接阶段，会在DATA段中存在多个相同的变量，它无法将这些变量统一成一个变量，也就是仅为此变量分配一个空间，而不是多份空间，假定这个变量在头文件没有赋初值，编译器就会将之放入BSS段，连接器会对BSS段的多个同名变量仅分配一个存储空间 
1. 如果在C文件中声明宏，结构体，函数等，那么我要在另一个C文件中引用相应的宏，结构体，就必须再做一次重复的工作，如果我改了一个C文件中的一个声明，那么又忘了改其它C文件中的声明，这不就出了大问题了，程序的逻辑就变成了你不可想象的了，如果把这些公共的东东放在一个头文件中，想用它的C文件就只需要引用一个就OK了！！！这样岂不方便，要改某个声明的时候，只需要动一下头文件就行了 
1. 在头文件中声明结构体，函数等，当你需要将你的代码封装成一个库，让别人来用你的代码，你又不想公布源码，那么人家如何利 用你的库呢？也就是如何利用你的库中的各个函数呢？？一种方法是公布源码，别人想怎么用就怎么用，另一种是提供头文件，别人从头文件中看你的函数原型，这 样人家才知道如何调用你写的函数，就如同你调用printf函数一样，里面的参数是怎样的？？你是怎么知道的？？还不是看人家的头文件中的相关声明 啊！！！当然这些东东都成了C标准，就算不看人家的头文件，你一样可以知道怎么使用

----

#头文件如何关联源文件

其实.cpp和.h文件名称没有任何直接关系，很多编译器都可以接受其他扩展名。 

谭浩强老师的《C程序设计》一书中提到，编译器预处理时，要对#include命令进行“文件包含处理”：将headfile.h的全部内容复制到#include “headfile.h”处。这也正说明了，为什么很多编译器并不care到底这个文件的后缀名是什么----因为#include预处理就是完成了一个“复制并插入代码”的工作。 

程序编译的时候，并不会去找b.cpp文件中的函数实现，只有在link的时候才进行这个工作。我们在b.cpp或c.cpp中用#include “a.h”实际上是引入相关声明，使得编译可以通过，程序并不关心实现是在哪里，是怎么实现的。源文件编译后成生了目标文件（.o或.obj文件），目标文件中，这些函数和变量就视作一个个符号。在link的时候，需要在makefile里面说明需要连接哪个.o或.obj文件（在这里是b.cpp生成的.o或.obj文件），此时，连接器会去这个.o或.obj文件中找在b.cpp中实现的函数，再把他们build到makefile中指定的那个可以执行文件中。

----

##规范

所以说:
.h文件是头文件，内含函数声明、宏定义、结构体定义等内容.c文件是程序文件，内含函数实现，变量定义等内容。而且是什么后缀也没有关系，只不过编译器会默认对某些后缀的文件采取某些动作。你可以强制编译器把任何后缀的文件都当作c文件来编。

这样分开写成两个文件是一个良好的编程风格。

而且，比方说 我在aaa.h里定义了一个函数的声明，然后我在aaa.h的同一个目录下建立aaa.c ， aaa.c里定义了这个函数的实现，然后是在main函数所在.c文件里#include这个aaa.h  然后我就可以使用这个函数了。 main在运行时就会找到这个定义了这个函数的aaa.c文件。这是因为：main函数为标准C/C++的程序入口，编译器会先找到该函数所在的文件。假定编译程序编译myproj.c（其中含main()）时，发现它include了mylib.h（其中声明了函数void test()），那么此时编译器将按照事先设定的路径（Include路径列表及代码文件所在的路径）查找与之同名的实现文件（扩展名为.cpp或.c，此例中为mylib.c），如果找到该文件，并在其中找到该函数（此例中为void test()）的实现代码，则继续编译；如果在指定目录找不到实现文件，或者在该文件及后续的各include文件中未找到实现代码，则返回一个编译错误.其实include的过程完全可以“看成”是一个文件拼接的过程，将声明和实现分别写在头文件及C文件中，或者将二者同时写在头文件中，理论上没有本质的区别。以上是所谓动态方式。对于静态方式，基本所有的C/C++编译器都支持一种链接方式被称为Static Link，即所谓静态链接。在这种方式下，我们所要做的，就是写出包含函数，类等等声明的头文件（a.h,b.h,...），以及他们对应的实现文件（a.cpp,b.cpp,...），编译程序会将其编译为静态的库文件（a.lib,b.lib,...）。在随后的代码重用过程中，我们只需要提供相应的头文件（.h）和相应的库文件（.lib），就可以使用过去的代码了。相对动态方式而言，静态方式的好处是实现代码的隐蔽性，即C++中提倡的“接口对外，实现代码不可见”。有利于库文件的转发.c文件和.h文件的概念与联系

****

# Runtime vs Compile time

Compile time: Time taken to convert the source code into a machine code so that it becomes an executable is called compile time.

Run time: When an application is running, it is called run time.

Compile time errors are those syntax errors, missing file reference errors. Runtime errors happen after the source code has been compiled into an executable program and while the program is running. Examples are program crashes, unexpected program behavior or features don't work.

****

#`#include`

###include <file>和#include“file”有什么不同?

1. 用符号“<”和“>”将要包含的文件的文件名括起来。这种方法指示预处理程序到预定义的缺省路径下寻找文件。预定义的缺省路径通常是在INCLUDE环境变量中指定的，请看下例：   

        INCLUDE=C:\COMPILER\INCLUDE；S:\SOURCE\HEADERS；
    对于上述INCLUDE环境变量，如果用#include<file>语句包含文件，编译程序将首先到C:\COMPILER\INCLUDE目录下寻找文件；如果未找到，则到S:\SOURCE\HEADERS目录下继续寻找；如果还未找到，则到当前目录下继续寻找。

2. 用双引号将要包含的文件的文件名括起来。这种方法指示预处理程序先到当前目录下寻找文件，再到预定义的缺省路径下寻找文件。

    对于上例中的INCLUDE环境变量，如果用#include“file”语句包含文件，编译程序将首先到当前目录下寻找文件；如果未找到，则到C:\COMPILER\INCLUDE目录下继续寻找；如果还未找到，则到S:\SOURCE\HEADERS目录下继续寻找。

`#include <file>`语句一般用来包含标准头文件(例如stdio.h或stdlib.h)，因为这些头文件极少被修改，并且它们总是存放在编译程序的标准包含文件目录下。`#include "file"`语句一般用来包含非标准头文件，因为这些头文件一般存放在当前目录下，你可以经常修改它们，并且要求编译程序总是使用这些头文件的最新版本。

****

#Array

`int myArray[10] = { 1, 2 }; // initialize to 1,2,0,0,0...`
`int myArray[10] = { 0 }; // all elements 0`
`int array[1024] = {[0 ... 1023] = 5}; //GCC only`

****

#**Function**

##值传递

形参是实参的拷贝，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参->形参），参数的值只能传入，

不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递。

    //值传递
    void change1(int n){
        cout<<"值传递--函数操作地址"<<&n<<endl;         //显示的是拷贝的地址而不是源地址 
        n++;
    }
    change1(n);

----

##指针传递

形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作

     //指针传递
    void change3(int *n){
         cout<<"指针传递--函数操作地址 "<<n<<endl; 
        *n=*n+1;
    }
    change3(&n);

指针传递参数本质上是值传递的方式，它所传递的是一个地址值。值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。

----

##引用传递

    //引用传递
    void change2(int & n){
        cout<<"引用传递--函数操作地址"<<&n<<endl; 
        n++;
    }
    change2(n);

引用的规则：  

1. 引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。 
2. 不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）。 
3. 一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。 

----

##return

函数不一定都有返回值,不带表达式的return语句将把控制权返回给调用者,但不返回有用值  

函数原形与函数声明中的参数名不要求相同.事实上,函数原型的参数名是可选的.  

----

## Const member functions in C++

A "const function", denoted with the keyword const after a function declaration, makes it a compiler error for this class function to *change a member variable of the class*. However, reading of a class variables is ok inside of the function, but writing inside of this function will generate a compiler error. 

Another way of thinking about such "const function" is by viewing an class function as a normal function taking an implicit this pointer. So a method int Foo::Bar(int random_arg) (without the const at the end) results in a function like int Foo_Bar(Foo* this, int random_arg), and a call such as Foo f; f.Bar(4) will internally correspond to something like Foo f; Foo_Bar(&f, 4). *Now adding the const at the end (int Foo::Bar(int random_arg) const) can then be understood as a declaration with a const this pointer: int Foo_Bar(const Foo* this, int random_arg)*. Since the type of this in such case is const, no modifications of member variables are possible.

It is possible to loosen the "const function" restriction of not allowing the function to write to any variable of a class. *To allow some of the variables to be writable even when the function is marked as a "const function", these class variables are marked with the keyword `mutable`*. Thus, if a class variable is marked as mutable, and a "const function" writes to this variable then the code will compile cleanly and the variable is possible to change. (C++11)

****

#intptr_t,uintptr_t

表示当前平台下能够安全地对指针进行转型的整型变量

    float* p=new float[...];  
    //.........................  
    intptr_t a=(intptr_t)p;  
    uintptr_t a2=(uintptr_t)p;  


****

#**Pointer**

##Dangling Pointer&Wild Pointer

迷途指针与野指针指的是不指向任何合法的对象的指针。

1. 当所指向的对象被释放或者收回，但是对该指针没有作任何的修改，以至于该指针仍旧指向已经回收的内存地址，此情况下该指针便称迷途指针

    若操作系统将这部分已经释放的内存重新分配给另外一个进程，而原来的程序重新引用现在的迷途指针，则将产生无法预料的后果。

1. 某些编程语言允许未初始化的指针的存在，而这类指针即为野指针

----

##Wild Pointer成因
1. 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL 指针，它 的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么 将指针设置为NULL，要么让它指向合法的内存。例如

    char *p = NULL;
    char *str = (char *) malloc(100);

2. 指针p 被free 或者delete 之后，没有置为NULL，让人误以为p 是个合法的指针。
3. 指针操作超越了变量的作用范围

----

##NULL

1. NULL: 定义为0或0L或(void *)0，用于指示一个指针值是空，即什么都不指；
1. '\0': 用且只用字符串结束符;
1. NUL : 0x00,0值字符，可以用于结束ASCII字符串，和'\0'类似，但是在c/c++中没有定义，如果要使用的话，需要自定义为 #define NUL '\0';
1. EOF ：通常定义为-1, 文件结束符标志，一般是ctrl+z. 


****

#析构函数

 “析构函数”功能是构造函数的反向操作。 它们调用，当销毁对象时 (释放)。 指定某个函数作为类的析构函数通过在类名用代字号 (~)

多个规则管理析构函数的声明。 析构函数：

1. 不接受参数。
1. 无法指定任何返回类型（包括 void）。
1. 无法使用 return 语句返回值。
1. 无法声明为 const、volatile 或 static。 但是，可以为声明为 const、volatile 或 static 的对象的析构调用它们。
1. 可以声明为 virtual。 通过使用虚拟析构函数，无需知道对象的类型即可销毁对象 - 使用虚函数机制调用该对象的正确析构函数。 请注意，析构函数也可以声明为抽象类的纯虚函数。

----

当发生以下事件之一时，将调用析构函数：

1. 对象分配空间使用`new`,显式释放使用`delete`.当对象使用`delete`,空间作为"派生程度最大对象" 或非基本数据类型子类的对象被释放或对象，这样的"首选派生对象"释放,只有当有虚拟析构函数时菜确保工作.当多重继承且类型信息与实际对象underlying类型不符时,Deallocation可能失败。

1. 块范围内的本地 （自动） 对象超出范围时。

1. 临时对象的生存期结束。

1. 程序结束时全局或静态对象存在。

1. 使用析构函数的完全限定的名称显式调用析构函数

----

析构函数可以自由调用类成员函数和访问的类成员数据.如果从析构函数调用虚函数时，调用的函数为即将被销毁类型的函数实现

1. 无法获得析构函数的地址
1. 派生类无法继承基类的析构函数.相反,派生类的析构函数会override基类析构函数

----

##析构函数调用次序

1. The class's destructor is called, and the body of the destructor function is executed.
1. Destructors for nonstatic member objects are called in the reverse order in which they appear in the class declaration. The optional member initialization list used in construction of these members does not affect the order of (construction or) destruction  //! 声明中出现的非静态成员会以相反的顺序依次销毁.构造函数中optional member initialization并不对销毁顺序造成影响
1. Destructors for nonvirtual base classes are called in the reverse order of declaration.
1. Destructors for virtual base classes are called in the reverse order of declaration.

----

##显式析构函数调用

如果你用placement new在内存中建立对象，你应该避免在该内存中用delete操作符。因为delete操作符调用operator delete来释放内存，但是包含对象的内存最初不是被operator new分配的，placement new只是返回转递给它的指针。谁知道这个指针来自何方？而你应该显式调用对象的析构函数来解除构造函数的影响

    s.String::~String();     // Nonvirtual call
    ps->String::~String();   // Nonvirtual call
    
    s.~String();       // Virtual call
    ps->~String();     // Virtual call

----

##Virtual Destructor

using namespace std;  
  
    class Base  
    {  
        public:  
            Base(){ cout<<"Constructing Base\n";}  
      
         // this is a destructor:  
      
            ~Base(){ cout<<"Destroying Base\n";}  
    };  
      
    class Derive: public Base  
    {  
            public:  
            Derive(){ cout<<"Constructing Derive\n";}  
      
            ~Derive(){ cout<<"Destroying Derive\n";}  
     };  
      
    int main()  
    {  
            Base *basePtr = new Derive();  
      
            delete basePtr;  
            return 0;  
    }  

> 当我们删除指向Deriver 的基类指针时， Deriver类中的析构函数没有调用。这里调用的是Base的析构函数（静态联编）

----

将基类析构函数声明为虚析构函数，

我们需要做的就是修改Base 类中的析构函数，在～前面加上virtual

我们在基类中将析构函数标明为虚函数，就表示在使用析构函数时，是采用动态联编的。那么delete basePtr的时候不再是采用静态联编直接在编译的时候确定basePtr指向的析构函数，而是在运行的时候根据 指向的类型来调用析构函数。

> 如果你在派生类中分配了内存空间的话，没有将基类的析构函数声明为虚析构函数，很容易发生内存泄漏事件

> 当你的基类的析构函数不为虚的话，其子类中所有的成员变量的类中分配的内存也将可能泄漏

> 将基类的析构函数设为virtual型，则所有的基类的派生类对象的析构函数都会自动设置为virtual型，这保证了任何情况下，不会出现由于析构函数没有被调用而导致的内存泄漏。 

****

#new,delete operator

> 使用 new 得来的空间，必须用 delete 来释放；使用 new [] 得来的空间，必须用 delete [] 来释放。彼此之间不能混用

##new operator

它要完成的功能分成两部分。第一部分是分配足够的内存以便容纳所需类型的对象。第二部分是它调用构造函数初始化内存中的对象。new操作符总是做这两件事情，你不能以任何方式改变它的行为。  

    int *p1 = (int *)malloc(sizeof(int) * length);
    int *p2 = new int[length];

----

##delete operator

`delete []objects;`

****

##operator new

你所能改变的是如何为对象分配内存。new操作符调用一个函数来完成必需的内存分配，你能够重写或重载这个函数来改变它的行为。new操作符为分配内存所调用函数的名字是operator new。  

`void * operator new(size_t size);`

返回值类型是void*，因为这个函数返回一个未经处理（raw）的指针，未初始化的内存。（如果你喜欢，你能写一种operator new函数，在返回一个指针之前能够初始化内存以存储一些数值，但是一般不这么做。）参数size_t确定分配多少内存。你能增加额外的参数重载函数operator new，但是第一个参数类型必须是size_t。  

----

你一般不会直接调用operator new，但是一旦这么做，你可以象调用其它函数一样调用它：

`void *rawMemory = operator new(sizeof(string));`

----

##Placement new

有时你有一些已经被分配但是尚未处理的的(raw)内存，你需要在这些内存中构造一个对象。你可以使用一个特殊的operator new ，它被称为placement new。

    class Widget {
    　public:
    　　Widget(int widgetSize);
    　　...
    };

placement new是标准C++库的一部分。为了使用placement new，你必须使用语句#include <new>  

> 如果用placement new建立对象,应避免使用delete operator,而是显式调用对象的析构函数解除构造函数的影响

    

    Widget * constructWidgetInBuffer(void *buffer,int widgetSize)
    {
    　return new (buffer) Widget(widgetSize);
    }

> 这个函数返回一个指针，指向一个Widget对象，对象在转递给函数的buffer里分配。当程序使用共享内存或memory-mapped I/O时这个函数可能有用，因为在这样程序里对象必须被放置在一个确定地址上或一块被例程分配的内存里  

这初看上去有些陌生，但是它是new操作符的一个用法，需要使用一个额外的变量（buffer），当new操作符隐含调用operator new函数时，把这个变量传递给它。被调用的operator new函数除了待有强制的参数size_t外，还必须接受void*指针参数，指向构造对象占用的内存空间。  

----

##operator delete

`void operator delete(void *memoryToBeDeallocated);`

----

这有一个隐含的意思是如果你只想处理未被初始化的内存，你应该绕过new和delete操作符，而调用operator new 获得内存和operator delete释放内存给系统：

    void *buffer = // 分配足够的
    operator new(50*sizeof(char)); // 内存以容纳50个char
    //没有调用构造函数
    ...
    operator delete(buffer); // 释放内存
    // 没有调用析构函数

> 这与在C中调用malloc和free等同

----

##operator new[]

`string *ps = new string[10];`

被使用的new仍然是new操作符，但是建立数组时new操作符的行为与单个对象建立有少许不同。第一是内存不再用operator new分配，代替以等同的数组分配函数，叫做operator new[]（经常被称为array new）。它与operator new一样能被重载。这就允许你控制数组的内存分配，就象你能控制单个对象内存分配一样  

----

##operator delete[]

同样当delete操作符用于数组时，它为每个数组元素调用析构函数，然后调用operator delete来释放内存  

就象你能替换或重载operator delete一样，你也替换或重载operator delete[]。  

----

##与malloc&free


###malloc

malloc()到底从哪里得到了内存空间？答案是从堆里面获得空间。也就是说函数返回的指针是指向堆里面的一块内存。操作系统中有一个记录空闲内存地址的链表。当操作系统收到程序的申请时，就会遍历该链表，然后就寻找第一个空间大于所申请空间的堆结点，然后就将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。  

###free

free()释放的是指针指向的内存！注意！释放的是内存，不是指针！这点非常非常重要！指针是一个变量，只有程序结束时才被销毁。释放了内存空间后，原来指向这块空间的指针还是存在！只不过现在指针指向的内容的垃圾，是未定义的，所以说是垃圾。因此，前面我已经说过了，释放内存后把指针指向NULL，防止指针在后面不小心又被解引用了。

更深层次来讲, free函数是将分配的这块内存与指针(malloc反悔的指针)之间的所有关系斩断, 指针变量中存储的地址也没有发生变化, 同时存储器中存储的内容也没有发生改变, **改变的只是指针对这快内存地址的所有权问题**. 但是该起始地址所在内存中的数据内容已经没法使用了,即时采用其他的指针也不能访问。此外, 由于指针变量中存储的地址值并没有改变, 由于指针没有对这个地址的访问权限, 程序中对指针的引用都可能导致错误的产生, 造成野指针, 因此最后还需要将指针指向NULL.

****

# CV type qualifiers

Appear in any type specifier, including decl-specifier-seq of declaration grammar, to specify constness or volatility of the object being declared or of the type being named.

- const - defines that the type is constant.
- volatile - defines that the type is volatile.
- mutable - applies to non-static class members of non-reference non-const type and specifies that the member does not affect the externally visible state of the class (as often used for mutexes, memo caches, lazy evaluation, and access instrumentation). mutable members of const class instances are modifiable. (Note: the C++ language grammar treats mutable as a storage-class-specifier, but it does not affect storage class.) 

----

## Explanation

For any type T (including incomplete types), other than function type or reference type, there are three more distinct types in the C++ type system: const-qualified T, volatile-qualified T, and const-volatile-qualified T.

> Note: array types are considered to have the same cv-qualification as their element types. 

When an object is first created, the cv-qualifiers used (which could be part of decl-specifier-seq or part of a declarator in a declaration, or part of type-id in a new-expression) determine the constness or volatility of the object, as follows:

- const object - an object whose type is const-qualified, or a non-mutable subobject of a const object. Such object cannot be modified: attempt to do so directly is a compile-time error, and attempt to do so indirectly (e.g., by modifying the const object through a reference or pointer to non-const type) results in undefined behavior.
- volatile object - an object whose type is volatile-qualified, or a subobject of a volatile object, or a mutable subobject of a const-volatile object. Every access (read or write operation, member function call, etc.) made through a glvalue expression of volatile-qualified type is treated as a visible side-effect for the purposes of optimization (that is, within a single thread of execution, volatile accesses cannot be optimized out or reordered with another visible side effect that is sequenced-before or sequenced-after the volatile access. This makes volatile objects suitable for communication with a signal handler, but not with another thread of execution, see std::memory_order). Any attempt to refer to a volatile object through a non-volatile glvalue (e.g. through a reference or pointer to non-volatile type) results in undefined behavior.
- const volatile object - an object whose type is const-volatile-qualified, a non-mutable subobject of a const volatile object, a const subobject of a volatile object, or a non-mutable volatile subobject of a const object. Behaves as both a const object and as a volatile object. 

----

#explicit

> 总结：explicit只对构造函数起作用，用来抑制隐式转换。

按照默认规定，只有一个参数的构造函数也定义了一个隐式转换，将该构造函数对应数据类型的数据转换为该类对象

    class String {
    String ( const char* p ); // 用C风格的字符串p作为初始化值
    //…
    }
    String s1 = “hello”; //OK 隐式转换，等价于String s1 = String（“hello”）;

但是有的时候可能会不需要这种隐式转换，如下：

    class String {
           String ( int n ); //本意是预先分配n个字节给字符串
    String ( const char* p ); // 用C风格的字符串p作为初始化值
    //…
    }

    String s4 = 10; //编译通过，也是分配10个字节的空字符串
    String s5 = ‘a’; //编译通过，分配int（‘a’）个字节的空字符串

> s4 和s5 分别把一个int型和char型，隐式转换成了分配若干字节的空字符串，容易令人误解。

----

为了避免这种错误的发生，我们可以声明显示的转换，使用explicit 关键字：

    class String {
           explicit String ( int n ); //本意是预先分配n个字节给字符串
    String ( const char* p ); // 用C风格的字符串p作为初始化值
    //…
    }

下面两种写法仍然正确：

    String s2 ( 10 );   //OK 分配10个字节的空字符串
    String s3 = String ( 10 ); //OK 分配10个字节的空字符串
 
下面两种写法就不允许了：

    String s4 = 10; //编译不通过，不允许隐式的转换
    String s5 = ‘a’; //编译不通过，不允许隐式的转换

****

#friend

A friend function of a class is *defined outside that class' scope but it has the right to access all private and protected members of the class*. Even though the prototypes for friend functions appear in the class definition, friends are not member functions.

****

# Templates

Template parameters may be of any of the three kinds of C++ entities: values, types, or templates:

    template <int N> struct Foo;                        // N is a value
    template <typename T> struct Bar;                   // T is a type
    template <template <typename> class X> struct Zip;  // X is a template

Example usage:

    Foo<10> a;
    Bar<int> b;
    Zip<Bar> c;

Note that this corresponds to the three ways of disamiguating dependent names:

    X::a = 10;              // X::a is a value
    typename X::B n = 10;   // X::B is a type
    X::template C<int> m;   // X::C is a template

An interesting combination arises when you want to "typify" a value. This can be done like so:

    template <typename T, T Val> struct Typificate;

Now you can say e.g. Typificate<int, 10> to get a unique type that represents the integer 10. This can occasionally be very useful, e.g. when T is a member function pointer (e.g. in this delegate implementation); or it can be used to create value-unique overloads for tag dispatch, etc.

## Function Templates

Function templates are special functions that can operate with generic types. This allows us to create a function template whose functionality can be adapted to more than one type or class without repeating the entire code for each type.

In C++ this can be achieved using template parameters. A template parameter is a special kind of parameter that ca be used to pass a type as argument: just like regular function parameters can be used to pass values to a function, *template parameters allow to pass also types to a function*. There function templates can use these parameters as if they were any other regular type.

The format for declaring function templates with type parameters is:

    template <class identifier> function_declaration;
    template <typename identifier> function_declaration;

The only difference between both prototypes is the use of either the keyword class or the keyword typename. *Its use is indistinct*, since both expressions have exactly the same meaning and behave exactly the same way.

For example, to create a template function that returns the greater one of two objects we could use: 

    template <class myType>
    myType GetMax (myType a, myType b) {
     return (a>b?a:b);
    }

Here we have created a template function with myType as its template parameter. This template parameter represents a type that has not yet been specified, but that can be used in the template function as if it were a regular type. As you can see, the function template GetMax returns the greater of two parameters of this still-undefined type.

To use this function template we use the following format for the function call:

    function_name <type> (parameters);

For example, to call GetMax to compare two integer values of type int we can write:

    int x,y;
    GetMax <int> (x,y);

When the compiler encounters this call to a template function, *it uses the template to automatically generate a function replacing each appearance of myType by the type passed as the actual template parameter (int in this case) and then calls it*. This process is automatically performed by the compiler and is invisible to the programmer.

Here is the entire example:

    // function template
    #include <iostream>
    using namespace std;
    
    template <class T>
    T GetMax (T a, T b) {
      T result;
      result = (a>b)? a : b;
      return (result);
    }
    
    int main () {
      int i=5, j=6, k;
      long l=10, m=5, n;
      k=GetMax<int>(i,j);
      n=GetMax<long>(l,m);
      cout << k << endl;
      cout << n << endl;
      return 0;
    }

In this case, we have used T as the template parameter name instead of myType because it is shorter and in fact is a very common template parameter name. But you can use any identifier you like.

In the example above we used the function template GetMax() twice. The first time with arguments of  type int and the second one with arguments of  type long. The compiler has instantiated and then called each time the appropriate version of the function.

As you can see, the type T is used within the GetMax() template function even to declare new objects of that type:

    T result;

Therefore, result will be an object of the same type as the parameters a and b when the function template is instatiated with a specific type.

*In this specific case where the generic type T is used as a parameter for GetMax the compiler can find out automatically which data type has to instantiate without having to explicitly specify it within angle brackets (like have done before specifying <int> and <long>)*. So we could have written instead.

    int i, j;
    GetMax(i, j);

Since both i and j are of type int, and the compiler can automatically find out that the template parameter can only be int. This implicit method produces exactly the same result:

    // function template II
    #include <iostream>
    using namespace std;
    
    template <class T>
    T GetMax (T a, T b) {
      return (a>b?a:b);
    }
    
    int main () {
      int i=5, j=6, k;
      long l=10, m=5, n;
      k=GetMax(i,j);
      n=GetMax(l,m);
      cout << k << endl;
      cout << n << endl;
      return 0;
    }

Notice how in this case, we called our function template GetMax() without explicitly specifying the type between angle-brackets <>. The compiler automatically determines what type is needed on each call.

Because our template function includes only one template parameter (class T) and the function template itself accepts two parameters, both of this T type, we cannot call our function template with two objects of different types as arguments:

    int i;
    long l;
    k=GetMax(i,l)

This would not be correct, since our GetMax function template expects two arguments of the same type, and in this call to it we use objects of two different types.

We can also define function templates that accept more than one type parametere, simply by specifying more template parameters between the angle brackets. For example:

    template <class T, class U>
    T GetMin (T a, U b) {
      return (a<b?a:b);
    }

In this case, our function template GetMin() accepts two parameters of different types and returns an object of the same type as the first parameter (T) that is passed. For example, after that declaration we could call GetMin() with:

    int i,j;
    long l;
    i = GetMin<int,long> (j,l);

or simply:

    i = GetMin (j,l);

even though j and l have different types, since the compiler can determine the appropriate instantiation anyway.

----

## Class templates

----

## Template Specialization

A powerful feature of C++'s templates is tempate specialization. This allows alternative implementations to be provided based on certain characteristics of the parameterized type that is being instantiated. Template specialization has two purposes to allow certain forms of optimization, and to reduce code bloat.

For example, consider a sort() tempate function. One of the primary activities that such a function does is to swap or exchange the values in two of the container's positions. If the values are large (in terms of the number of bytes it takes to store each of them), then it is often quicker to first build a separate list of pointers to the objects, sort those pointers, and then build the final sorted sequence. If the values are quite small however it is usually fastest to just swap the values in-place as needed. Furthermore, if the parameterized type is already of some pointer-type, then there is no need to build a separate pointer array. *Template specialization allows the template creator to write different implementations and to specify the characteristics that the parameterized type(s) must have for each implementation to be used*.

Unlike function templates, class templates can be **partially specialized**. That means that *an alternate version of the class template code can be provided when some of the template parameters are known, while leaving other template parameters generic*. This can be used, for example, to create a default implementation (the primary specialization) that assumes that copying a parameterizing type is expensive and then create partial specializations for types that are cheap to copy, thus increasing overall efficiency. Clients of such a class template just use specializations of it without needing to know whether the compiler used the primary specialization or some partial specialization in each case. *Class templates can also be fully specialized, which means that an alternate implementation can be provided when all of the parameterizing types are known*.

模板机制为C++提供了泛型编程的方式，在减少代码冗余的同时仍然可以提供类型安全。 特化必须在同一命名空间下进行，可以特化类模板也可以特化函数模板，但类模板可以偏特化和全特化，而函数模板只能全特化。 模板实例化时会优先匹配”模板参数”最相符的那个特化版本。

> C++的模板机制被证明是图灵完备的，即可以通过模板元编程（template meta programming）的方式在编译期做任何计算。

----

### 模板的声明

类模板和函数模板的声明方式是一样的，在类定义/模板定义之前声明模板参数列表。例如：

    // 类模板
    template <class T1, class T2>
    class A{
        T1 data1;
        T2 data2;
    };
    
    // 函数模板
    template <class T>
    T max(const T lhs, const T rhs){   
        return lhs > rhs ? lhs : rhs;
    }

----

### 全特化

通过全特化一个模板，可以对一个特定参数集合自定义当前模板，类模板和函数模板都可以全特化。 全特化的模板参数列表应当是空的，并且应当给出”模板实参”列表：

    // 全特化类模板
    template <>
    class A<int, double>{
        int data1;
        double data2;
    };

    // 函数模板
    template <>
    int max(const int lhs, const int rhs){
        return lhs > rhs ? lhs : rhs;
    }

注意类模板的全特化时在类名后给出了”模板实参”，但函数模板的函数名后没有给出”模板实参”。 这是因为编译器根据int max(const int, const int)的函数签名可以推导出来它是T max(const T, const T)的特化。

----

### 特化的歧义

上述函数模板不需指定”模板实参”是因为编译器可以通过函数签名来推导，但有时这一过程是有歧义的：

    template <class T>
    void f(){ T d; }
    
    template <>
    void f(){ int d; }

此时编译器不知道f()是从f<T>()特化来的，编译时会有错误：

    error: no function template matches function template specialization 'f'

这时我们便需要显式指定”模板实参”：

    template <class T>
    void f(){ T d; }
    
    template <>
    void f<int>(){ int d; }

----

### 偏特化

类似于全特化，偏特化也是为了给自定义一个参数集合的模板，但偏特化后的模板需要进一步的实例化才能形成确定的签名。 值得注意的是函数模板不允许偏特化，这一点在Effective C++: Item 25中有更详细的讨论。 偏特化也是以template来声明的，需要给出剩余的”模板形参”和必要的”模板实参”。例如：

    template <class T2>
    class A<int, T2>{
        ...
    };

函数模板是不允许偏特化的，下面的声明会编译错：

    template <class T1, class T2>
    void f(){}
    
    template <class T2>
    void f<int, T2>(){}

但函数允许重载，声明另一个函数模板即可替代偏特化的需要：

    template <class T2>
    void f(){}              // 注意：这里没有"模板实参"

多数情况下函数模板重载就可以完成函数偏特化的需要，一个例外便是std命名空间。 std是一个特殊的命名空间，用户可以特化其中的模板，但不允许添加模板（其实任何内容都是禁止添加的）。 因此在std中添加重载函数是不允许的，在Effective C++: Item 25中给出了一个更详细的案例。

转载请注明来源： https://harttle.land/2015/10/03/cpp-template.html 欢迎对文中引用进行考证，欢迎指出任何不准确和模糊之处。可以在下面评论区评论，也可以邮件至 harttle@harttle.com。

----

### Another Example

    #include <iostream>
    
    
    template<typename T>
    struct some_template {
        static void print() {
            std::cout << "original class template" << std::endl;
        }
    };
    
    
    template<>
    struct some_template<int> {
        static void print() {
            std::cout << "class template specialization for int" << std::endl;
        }
    };
    
    
    template<typename T>
    void some_func(T) {
        std::cout << "original function template" << std::endl;
    }
    
    
    template<>
    void some_func(double) {
        std::cout << "function template specialization for double" << std::endl;
    }
    
    
    int main() {
        some_template<float>::print();
        some_template<int>::print();
        
        some_func(42);
        some_func(9.8);
    }

    g++ -std=c++11 -O2 -Wall -pedantic -pthread main.cpp && ./a.out
    + g++ -std=c++11 -O2 -Wall -pedantic -pthread main.cpp
    + ./a.out
    original class template
    class template specialization for int
    original function template
    function template specialization for double

----

## Variadic Templates

One of the new features of C++11 is *variadic templates*. Finally, there's a way to write functions that take an arbitrary number of arguments in a type-safe way and have all the argument handling logic resolved at compile-time, rather than run-time. Variadic templates can be used for much more than just functions that take an arbitrary number of arguments; in this article I want to demonstrate some of these capabilities.

### Basic Example 

Let's dive in, by implementing a function that adds all of its arguments together:

    template<typename T>
    T adder(T v) {
      return v;
    }
    
    template<typename T, typename... Args>
    T adder(T first, Args... args) {
      return first + adder(args...);
    }

And here are a couple of ways we could call it:

    long sum = adder(1, 2, 3, 8, 7);
    
    std::string s1 = "x", s2 = "aa", s3 = "bb", s4 = "yy";
    std::string ssum = adder(s1, s2, s3, s4);

`typename... Args` is called a template parameter pack, and `Args... args` is called a function parameter pack (Args is, of course, a completely arbitrary name and could be anything else). *Variadic templates are written just the way you'd write recursive code* - you need a base case (the adder(T v) declaration above) and a general case which "recurses" [1]. The recursion itself happens in the call adder(args...). Note how the general adder is defined - the first argument is peeled off the template parameter pack into type T (and accordingly, argument first). So with each call, the parameter pack gets shorter by one parameter. Eventually, the base case is encountered.

To get a better feel for the process, one can use the __PRETTY_FUNCTION__ macro [2]. If we insert the following as the first line in both versions of adder above:

    std::cout << __PRETTY_FUNCTION__ << "\n";

And then execute adder(1, 2, 3, 8, 7), we'll see:

    T adder(T, Args...) [T = int, Args = <int, int, int, int>]
    T adder(T, Args...) [T = int, Args = <int, int, int>]
    T adder(T, Args...) [T = int, Args = <int, int>]
    T adder(T, Args...) [T = int, Args = <int>]
    T adder(T) [T = int]

****

#Virtual

##动态联编与静态联编

将源代码中的函数调用解释为执行特定的函数代码被称为函数名联编(binding).

1. 在编译过程中进行联编被称为静态联编(static binding),又称早期联编(early binding).它对函数的选择是根据基于对象的 指针或者引用来确定的。（即指针或者引用 指向哪个对象就调用哪个对象的相应的函数）
1. 编译器必须生成能够在程序运行时选择正确的虚方法的代码,这被称为动态联编(dynamic binding), 又称为晚期联编(late binding).

为使程序能够在运行阶段进行决策,必须采取一些方法来跟踪实际运行中基类指针或引用指向的对象类型,这增加了额外的开销.

例如,如果类不会用作基类,则不需要动态联编.同样,如果派生类不重新定义基类的任何方法,也不需要使用动态联编.

在这些情况下,使用静态联编更合理,效率也更高.由于静态联编的效率更高,因此被设置为C++的默认选择.

仅当程序设计确实 需要虚函数时,才使用它们.

> Strousstrup说,C++的指导原则之一是, 不要为不使用的我付出代价(内存或者处理时间).

----

##Virtual Function

编译器处理虚函数的方法是:给每一个对象添加一个隐藏成员.隐藏成员中保存了一个指向函数地址数组的指针.这种数组称为虚函数表(virtual function table, vtbl).虚函数表中存储了为类对象进行声明的虚函数的地址  

基类对象包含一个指针,访指针指向基类中所有虚函数地址表.派生类对象将包含一个指向独立地址表的指针.如果派生类提供了虚岁函数的新定义,访虚函数表将保存新函数的地址;如果派生类没有重新定义虚函数.该vtbl将保存函数原始版本的地址.如果派生类定义了新的虚函数,则该函数的地址也将被添加到vtbl中.注意,无论类中包含的虚函数是1还是10 个,都只需要在对象中添加1个地址成员,只是表的大小不同而已.  

调用虚函数时,程序将查看存储在对象中的vtbl地址,然后转向相应的函数地址表.如果使用类声明中定义的第一个虚函数,则程序将使用数组中的第一个函数地址,并执行具有该地址的函数.如果使用类声明中的第三个虚函数,程序将使用地址为数组中第三个元素的函数.  

简而言之,使用虚函数时, 在内存和执行速度方面有一定成本,包括:

1. 每个对象都将增大,增大量为存储地址的空间.
1. 对每个类,编译器都创建一个虚岁函数地址表.
1. 每个函数调用都有需要执行一步额外的操作,即到表中查找地址.

虽然非虚函数的效率比虚函数稍高,但不具备动态联编功能.

----

##Virtual Table

对C++ 了解的人都应该知道虚函数（Virtual Function）是通过一张虚函数表（Virtual Table）来实现的。简称为V-Table。在这个表中，主是要一个类的虚函数的地址表，这张表解决了继承、覆盖的问题，保证其容真实反应实际的函数。这样，在有虚函数的类的实例中这个表被分配在了这个实例的内存中，所以，当我们用父类的指针来操作一个子类的时候，这张虚函数表就显得由为重要了，它就像一个地图一样，指明了实际所应该调用的函数。

这里我们着重看一下这张虚函数表。C++的编译器应该是保证虚函数表的指针存在于对象实例中最前面的位置（这是为了保证取到虚函数表的有最高的性能——如果有多层继承或是多重继承的情况下）。 这意味着我们通过对象实例的地址得到这张虚函数表，然后就可以遍历其中函数指针，并调用相应的函数。

假设我们有这样的一个类：

 

class Base {

     public:

            virtual void f() { cout << "Base::f" << endl; }

            virtual void g() { cout << "Base::g" << endl; }

            virtual void h() { cout << "Base::h" << endl; }

 

};

 

按照上面的说法，我们可以通过Base的实例来得到虚函数表。 下面是实际例程：

 

          typedef void(*Fun)(void);

 

            Base b;

 

            Fun pFun = NULL;

 

            cout << "虚函数表地址：" << (int*)(&b) << endl;

            cout << "虚函数表 — 第一个函数地址：" << (int*)*(int*)(&b) << endl;

 

            // Invoke the first virtual function 

            pFun = (Fun)*((int*)*(int*)(&b));

            pFun();

****

##struct

    struct tagMyStruct   
    {   
    　int iNum;   
    　long lLength;   
    };   


tagMyStruct称为“tag”，即“标签”，实际上是一个临时名字，struct 关键字和tagMyStruct一起，构成了这个结构类型

我们可以用struct tagMyStruct varName来定义变量，但要注意，使用tagMyStruct varName来定义变量是不对的，因为struct 和tagMyStruct合在一起才能表示一个结构类型。 

###位域

****

##extern

在C语言中，修饰符extern用在变量或者函数的声明前，用来说明“此变量/函数是在别处定义的，要在此处引用”。  

另外，extern也可用来进行链接指定。  

> 与extern对应的关键字是static，被它修饰的全局变量和函数只能在本模块中使用。因此，一个函数或变量只可能被本模块使用时，其不可能被extern “C”修饰。

##extern "C"

C++语言在编译的时候为了解决函数的多态问题，会将函数名和参数联合起来生成一个中间的函数名称，而C语言则不会，因此会造成链接时找不到对应函数的情况，此时C函数就需要用extern “C”进行链接指定，这告诉编译器，请保持我的名称，不要给我生成用于链接的中间函数名。  

C语言中不支持extern "C"声明，在.c文件中包含了extern "C"时会出现编译语法错误。


###extern "C" 使用要点
1. 可以是单一语句

        extern "C" double sqrt(double);

2. 可以是复合语句, 相当于复合语句中的声明都加了extern "C"

        extern "C"
        {
            double sqrt(double);
            int min(int, int);
        }

3.可以包含头文件，相当于头文件中的声明都加了extern "C"

        extern "C"
        {
            #include <cmath>
        }

4. 不可以将extern "C" 添加在函数内部
5. 如果函数有多个声明，可以都加extern "C", 也可以只出现在第一次声明中，后面的声明会接受第一个链接指示符的规则。
6. 除extern "C", 还有extern "FORTRAN" 等。


##extern 函数

如果函数的声明中带有关键字extern，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。即下述两个函数声明没有明显的区别：

当然，这样的用处还是有的，就是在程序中取代include “*.h”来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。

----

##static 

###Static Variable

1. A static variable inside a function keeps its value between invocations.
1. A static global variable or a function is "seen" only in the file it's declared in

----

###Static Function in C

Is used widely as an "access control" feature. If you have a .c file( more precisely, compilation unit) implementing some functionality, it usually exposes only a few "public" functions to users. The rest of its functions should be made static, so that the user won't be able to access them. This is encapsulation, a good practice.

----

###Static Function in Cpp



# Using

## Using declaration

Introduces a name that is defined elsewhere into the declarative region where this using declaration appears

----

## Explanation 

Using-declarations can be used to introduce namespace members into other namespaces and block scopes, or to introduce base class members into derived class definitions.

> A using-declaration with more than one using-declarator is equivalent to a corresponding sequence of using-declarations with one using-declarator. 

----

## In namespace and block scope

Using-declaration introduces a member of another namespace into current namespace or block scope

    #include <iostream>
    #include <string>
    using std::string;
    int main()
    {
        string str = "Example";
        using std::cout;
        cout << str;
    }

See namespace for details.

----

# In class definition

Using-declaration introduces a member of a base class into the derived class definition, such as to expose a protected member of base as public member of derived. In this case, nested-name-specifier must name a base class of the one being defined. If the name is the name of an overloaded member function of the base class, all base class member functions with that name are introduced. If the derived class already has a member with the same name, parameter list, and qualifications, the derived class member hides or overrides (doesn't conflict with) the member that is introduced from the base class. 

    #include <iostream>
    struct B {
        virtual void f(int) { std::cout << "B::f\n"; }
        void g(char)        { std::cout << "B::g\n"; }
        void h(int)         { std::cout << "B::h\n"; }
     protected:
        int m; // B::m is protected
        typedef int value_type;
    };
     
    struct D : B {
        using B::m; // D::m is public
        using B::value_type; // D::value_type is public
     
        using B::f;
        void f(int) { std::cout << "D::f\n"; } // D::f(int) overrides B::f(int)
        using B::g;
        void g(int) { std::cout << "D::g\n"; } // both g(int) and g(char) are visible
                                               // as members of D
        using B::h;
        void h(int) { std::cout << "D::h\n"; } // D::h(int) hides B::h(int)
    };
     
    int main()
    {
        D d;
        B& b = d;
     
    //    b.m = 2; // error, B::m is protected
        d.m = 1; // protected B::m is accessible as public D::m
        b.f(1); // calls derived f()
        d.f(1); // calls derived f()
        d.g(1); // calls derived g(int)
        d.g('a'); // calls base g(char)
        b.h(1); // calls base h()
        d.h(1); // calls derived h()
    }

Output:

    D::f
    D::f
    D::g
    B::g
    B::h
    D::h

----

# constexpr specifier

The constexpr specifier declares that it is possible to evaluate the value of the function or variable at *compile time*. Such variables and functions can then be used where only compile time constant expressions are allowed (provided that appropriate function arguments are given). A constexpr specifier used in an object declaration or non-static member function (until C++14) implies const. A constexpr specifier used in a function or static member variable (since C++17) declaration implies inline. 

常量表达式主要是允许一些计算发生在编译时，即发生在代码编译而不是运行的时候。这是很大的优化：假如有些事情可以在编译时做，它将只做一次，而不是每次程序运行时。需要计算一个编译时已知的常量，比如特定值的sine或cosin？确实你亦可以使用库函数sin或cos，但那样你必须花费运行时的开销。使用constexpr，你可以创建一个编译时的函数，它将为你计算出你需要的数值。用户的电脑将不需要做这些工作。

## constexpr初探

为了使函数获取编译时计算的能力，你必须指定constexpr关键字到这个函数。

    constexpr int multiply (int x, int y)
    {
        return x * y;
    }

// 将在编译时计算
const int val = multiply( 10, 10 );

除了编译时计算的性能优化，constexpr的另外一个优势是，它允许函数被应用在以前调用宏的所有场合。例如，你想要一个计算数组size的函数，size是10的倍数。如果不用constexpr，你需要创建一个宏或者使用模板，因为你不能用函数的返回值去声明数组的大小。但是用constexpr，你就可以调用一个constexpr函数去声明一个数组。

    constexpr int getDefaultArraySize (int multiplier)
    {
        return 10 * multiplier;
    }

    int my_array[ getDefaultArraySize( 3 ) ];

----

## constexpr函数的限制

一个constexpr有一些必须遵循的严格要求：

1. 函数中只能有一个return语句（有极少特例）
1. 只能调用其它constexpr函数
1. 只能使用全局constexpr变量

注意递归并不受限制。但只允许一个返回语句，那如何实现递归呢？可以使用三元运算符（?:)。例如，计算n的阶乘：

    constexpr int factorial (int n)
    {
        return n > 0 ? n * factorial( n - 1 ) : 1;
    }

现在你可以使用factorial(2)，编译器将在编译时计算这个值，这种方式运行更巧妙的计算，与内联截然不同。你无法内联一个递归函数。

----

## constexpr和运行时

一个声明为constexpr的函数同样可以在运行时被调用，当这个函数的参数是非常量的：

int n;
cin >> n;
factorial( n );

这意味着你不需要分别写运行时和编译时的函数。

----

## 编译时使用对象

假如你有一个Circle类：

    class Circle
    {
        public:
        Circle (int x, int y, int radius) : _x( x ), _y( y ), _radius( radius ) {}
        double getArea () const
        {
            return _radius * _radius * 3.1415926;
        }
        private:
            int _x;
            int _y;
            int _radius;
    };

你希望在编译期构造一个Circle接着算出他的面积。

    constexpr Circle c( 0, 0, 10 );
    constexpr double area = c.getArea();

事实证明你可以给Circle类做一些小的修改以完成这件事。首先，我们需要将构造函数声明为constexpr，接着我们需要将getarea函数声明为constexpr。将构造函数声明为constexpr则运行构造函数在编译期运行，只要这个构造函数的参数为常量，且构造函数仅仅包含成员变量的constexpr构造（所以默认构造可以看成constexpr，只要成员变量都有constexpr构造）。

    class Circle
    {
        public:
        constexpr Circle (int x, int y, int radius) : _x( x ), _y( y ), _radius( radius ) {}
        constexpr double getArea ()
        {
            return _radius * _radius * 3.1415926;
        }
        private:
            int _x;
            int _y;
            int _radius;
    };

----

## constexpr vs const

假如你将一个成员函数标记为constexpr，则顺带也将它标记为了const。如果你将一个变量标记为constexpr，则同样它是const的。但相反并不成立，一个const的变量或函数，并不是constexpr的。

## constexpr和浮点数

到这里我们讲到的constexpr功能都可以通过模板元编程实现。但constexpr支持的一项能力是可以计算浮点型的数据。因为double和float不是有效的模板参数，你不可以轻易的通过模板编译期计算浮点数的值。而constexpr允许编译期计算浮点型数据。

## 权衡constexpr

C++开发者早就深受修改一个头文件则引发重新编译导致编译缓慢的困扰。而constexpr可能引入增加编译时间的风险，但也有一些技术去降低这种风险。首先，因为constexpr函数相同的参数会输出相同的结果，所以它们可以被memoized，事实上GCC已经支持memoization。

因为可以对constexpr函数memoize,所以用constexpr函数替换模板函数的地方，(编译）性能不会变得更坏，但代码会变得清晰。事实上，替换掉一部分模板实例，编译会显著加快。

最后，标准允许编译器去限制递归函数的级数。这样可以限制深度递归的编译性能损耗。


----

#inline

在c++中，为了解决一些频繁调用的小函数大量消耗栈空间或者是叫栈内存的问题，特别的引入了inline修饰符，表示为内联函数。  

当编译器内联展开一个函数调用时，该函数的代码会被插入到调用代码流中（概念上类似于展开#define宏）。这能够改善性能（当然还有很多其它因素），因为优化器能够顺序集成(procedurally integrate)被调用代码，即将被调用代码直接优化进调用代码中。  

inline的使用是有所限制的，inline只适合函数体内代码简单的函数使用，不能包含复杂的结构控制语句例如while switch，并且不能内联函数本身不能是直接递归函数(自己内部还调用自己的函数)。 

##关于`#define`

说到这里我们不得不说一下在c语言中广泛被使用的#define语句，是的define的确也可以做到inline的这些工作，但是define是会产生副作用的，尤其是不同类型参数所导致的错误，由此可见inline有更强的约束性和能够让编译器检查出更多错误的特性，在c++中是不推荐使用define的。  

----

例1   
`#define   N   2+2`
`void main()`
`{`
`   int   a=N*N;`
`   printf(“%d”,a);`
`}`
(1) 出现问题：在此程序中存在着宏定义命令，宏N代表的字符串是2+2，在程序中有对宏N的使用，一般同学在读该程序时，容易产生的问题是先求解N为2＋2＝4，然后在程序中计算a时使用乘法，即N*N=4*4=16,其实该题的结果为8，为什么结果有这么大的偏差?
(2)问题解析：如1节所述，宏展开是在预处理阶段完成的，这个阶段把替换文本只是看作一个字符串，并不会有任何的计算发生，在展开时是在宏N出现的地方 只是简单地使用串2＋2来代替N，并不会增添任何的符号，所以对该程序展开后的结果是a=2+2*2+2，计算后=8，这就是宏替换的实质，如何写程序才 能完成结果为16的运算呢？
(3)解决办法：将宏定义写成如下形式

    #define   N   (2+2)
这样就可替换成(2+2)*(2+2)=16
2.2 带参数的宏定义出现的问题
在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般学生容易写成如下形式：

    #define   area(x)   x*x
这在使用中是很容易出现问题的，看如下的程序

    void main()
    {
        int   y=area(2+2);
        printf(“%d”,y);
    }
按理说给的参数是2+2，所得的结果应该为4*4=16，但是错了，因为该程序的实际结果为8，仍然是没能遵循纯粹的简单替换的规则，又是先计算再替换 了，在这道程序里，2+2即为area宏中的参数，应该由它来替换宏定义中的x，即替换成2+2*2+2=8了。那如果遵循(1)中的解决办法，把2+2 括起来，即把宏体中的x括起来，是否可以呢？#define   area(x) (x)*(x)，对于area(2+2)，替换为(2+2)*(2+2)=16，可以解决，但是对于area(2+2)/area(2+2)又会怎么样 呢，有的学生一看到这道题马上给出结果，因为分子分母一样，又错了，还是忘了遵循先替换再计算的规则了，这道题替换后会变为 (2+2)*(2+2)/(2+2)*(2+2)即4*4/4*4按照乘除运算规则，结果为16/4*4=4*4=16，那应该怎么呢？解决方法是在整个 宏体上再加一个括号，即#define   area(x) ((x)*(x))，不要觉得这没必要，没有它，是不行的。

----

和`#define`宏不同的是，内联函数总是对参数只精确地进行一次求值，从而避免了那声名狼藉的宏错误。换句话说，调用内联函数和调用正规函数是等价的，差别仅仅是更快  

和宏不同的，还有内联函数的参数类型被检查，并且被正确地进行必要的转换。  

##如何告诉编译器使非成员函数成为内联函数？

    inline
    void f(int i, char c)
    {
        // ...
    } 

----

##如何告诉编译器使一个成员函数成为内联函数？

    inline
    void Fred::f(int i, char c)
    {
        // ...
    } 

----

注意：将函数的定义（{...}之间的部分）放在头文件中是强制的，除非该函数仅仅被单个 .cpp 文件使用。尤其是，如果你将内联函数的定义放在 .cpp 文件中并且在其他 .cpp文件中调用它，连接器将给出 “unresolved external” 错误。  

----

##其它方法告诉编译器使成员函数成为内联

在类体内定义成员函数：

    class Fred {
    public:
        void f(int i, char c)
            {
              // ...
            }
    }; 

尽管这对于写类的人来说很容易，但由于它将类是“什么”(what)和类“如何”(how)工作混在一起，给阅读的人带来了困难。我们通常更愿意在类体外使用 inline 关键字定义成员函数来避免这种混合。  

----

##在定义于类外部的内联函数中，以下哪种方法最好：是把inline关键字放在类内部的成员函数声明前呢，还是放到类外部函数的定义前呢，还是两个地方都写？

最佳实践是：仅放在类外部函数的定义前。 

    class Foo {
    public:
        void method();  ← best practice: don't put the inline keyword here
        ...
    };
    
    inline void Foo::method()  ← best practice: put the inline keyword here
        { ... } 

这里是基本的想法：

- 类的public部分是你描述类的可见语义的地方，包含公有成员函数、友元函数和任何其它暴露给外部的内容。不要提供在调用者代码中看不到的细节。
- 类的其它部分，包括非公有部分、成员定义和友元函数声明等等，这些纯粹是实现细节。如果还没有在类的公有部分描述，那么不要提供相关可见语义。

回到内联上来：*一个函数是否内联只是实现细节*，不会改变函数调用的可见语义（即含义）。因此inline关键字应该和函数定义放在一起，而不是在类的public声明区。  

----

#预处理

##`#define`

`#define`命令是C语言中的一个宏定义命令，它用来将一个标识符定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。
该命令有两种格式：一种是简单的宏定义，另一种是带参数的宏定义。
1. 简单的宏定义：
    `#define`   <宏名>　　<字符串>
    `#define` PI 3.1415926
1. 带参数的宏定义
    `#define`   <宏名> (<参数表>)   <宏体>
    `#define`   A(x) x

一个标识符被宏定义后，该标识符便是一个宏名。这时，在程序中出现的是宏名，在该程序被编译前，先将宏名用被定义的字符串替换，这称为宏替换，替换后才进行编译，宏替换是简单的替换。

----

###特殊的`#define`

1. `#define Conn(x,y) x##y`

    `x##y`表示什么？表示x连接y
    `int n = Conn(123,456);`    结果就是n=123456;

1. `#define ToChar(x) #@x`

    `#@x`，其实就是给x加上单引号，结果返回是一个const char
    `char a = ToChar(1);`   结果就是a='1';

    > 但是如果你的参数超过四个字符，编译器就给给你报错了！error C2015: too many characters in constant   ：P

1. `#define ToString(x) #x`

    `char* str = ToString(123132);就成了str="123132";`

----

- #define xxx() ()
- #define xxx() {} //!多条语句大括号

    标准C支持的

- #define xxx() ({})

    GCC新增的功能，主要为了防止宏展开出现问题，默认展开时是要加上一个;的，容易出问题。
    > 最后一个式子的返回值作为宏函数的返回值。

----

## `#undef`

`#undef`是在后面取消以前定义的宏定义
该指令的形式为 `#undef 标识符`

----

## `#typedef`

typedef 声明有助于创建平台无关类型，甚至能隐藏复杂和难以理解的语法。不管怎样，使用 typedef 能为代码带来意想不到的好处，通过本文你可以学习用 typedef 避免缺欠，从而使代码更健壮

typedef 声明，简称 typedef，为现有类型创建一个新的名字

　typedef 使用最多的地方是创建易于记忆的类型名，用它来归档程序员的意图。类型出现在所声明的变量名字中，位于 ''typedef'' 关键字右边。例如：`typedef int size;`   

----

记住：不管什么时候，只要为指针声明 typedef，那么都要在最终的 typedef 名称中加一个 const，以使得该指针本身是常量，而不是对象

    typedef const char * cpstr;   
    int mystrcmp(cpstr, cpstr); // 现在是正确的  

****

# Lambda expressions

Constructs a closuure: an unnamed function object capable of capturing variables in scope.

## Syntax

1. [ captures ] <tparams>(optional)(c++20) ( params ) specifiers exception attr -> ret requires(optional)(c++20) { body }
2. [ captures ] ( params ) -> ret { body }
3. [ captures ] ( params ) { body } 
4. [ captures ] { body }

1. Full declaration.
2. Declaration of a const lambda: the objects captured by copy are const in the lambda body.
3. Omitted trailing-return-type: the return type of the closure's operator() is deduced from return statements as if for a function whose return type is declared auto.
4. Omitted parameter list: function takes no arguments, as if the parameter list was (). This form can only be used if none of constexpr, mutable, exception specification, attributes, or trailing return type is used. 

----

## Explanation

- captures

    a comma-separated list of zero or more captures, optionally beginning with a capture-default.

    Capture list can be passed as follows (see below for the detailed description):

        - [a,&b] where a is captured by copy and b is captured by reference.
        - [this] captures the current object (*this) by reference
        - [&] captures all automatic variables used in the body of the lambda by reference and current object by reference if exists
        - [=] captures all automatic variables used in the body of the lambda by copy and current object by reference if exists
        - [] captures nothing 

    A lambda expression can use a variable without capturing it if the variable

        - is a non-local variable or has static or thread local storage duration (in which case the variable cannot be captured), or
        - is a reference that has been initialized with a constant expression. 

A lambda expression can read the value of a variable without capturing it if the variable

        - has const non-volatile integral or enumeration type and has been initialized with a constant expression, or
        - is constexpr and trivially copy constructible. 

    > Structured bindings cannot be captured.(since C++17)

- <tparams> (C++20)

    a template parameter list (in angle brackets), used to provide names to the template parameters of a generic lambda (see ClosureType::operator() below). Like in a template declaration, the template parameter list may be followed by an optional requires-clause, which specifies the constraints on the template arguments.

- params

    The list of parameters, as in named functions, except that default arguments are not allowed. If auto is used as a type of a parameter, the lambda is generic lambda.

- specifiers

    Optional sequence of specifiers. The following specifiers are allowed:

        - mutable allow body to modify the parameters captured by copy, and to call their non-const member functions.
        - constexpr explicit specifies that the function call operator is a constexpr function. When this specifier is not present, the function call operator will be constexpr anyway, if it happens to satisfy all constexpr function requirements. (since C++17)

- exception provides the exception specification or the noexcept clause for opertor() of the closure type.
- attr provides the attribute specification for operator() of the closure type.
- ret Return type. If not present it's implied by the function return statements (or void if it doesn't return any value)
- requires adds a constraint to operator() of the closure type
- body Function body 

----

## Generic Lambda

Generic lambdas were introduced in C++14.

Simply, the closure type defined by the lambda expression will have a templated call operator rather than the regular, non-template call operator of C++11's lambdas (of course, when auto appears at least once in the parameter list). 

So your example:

    auto glambda = [] (auto a) { return a; };

Will make glambda an instance of this type:

    class /* unnamed */
    {
    public:
        template<typename T>
        T operator () (T a) const { return a; }
    };

Paragraph 5.1.2/5 of the C++14 Standard Draft n3690 specifies how the call operator of the closure type of a given lambda expression is defined:


****

#Gcc

##Delaring Attributes of Functions

In GNU C, you can use function attributes to declare certain things about functions called in your program which help the compiler optimize calls and check your code more carefully. For example, you can use attributes to declare that a function never returns (noreturn), returns a value depending only on its arguments (pure), or has printf-style arguments (format). 

You can also use attributes to control memory placement, code generation options or call/return conventions within the function being annotated. Many of these attributes are target-specific. For example, many targets support attributes for defining interrupt handler functions, which typically must follow special register usage and return conventions. 

Function attributes are introduced by the __attribute__ keyword on a declaration, followed by an attribute specification inside double parentheses. You can specify multiple attributes in a declaration by separating them by commas within the double parentheses or by immediately following an attribute declaration with another attribute declaration. See Attribute Syntax, for the exact rules on attribute syntax and placement. 

GCC also supports attributes on variable declarations (see Variable Attributes), labels (see Label Attributes), enumerators (see Enumerator Attributes), statements (see Statement Attributes), and types (see Type Attributes). 

https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#Common-Function-Attributes

###alias

###aligned

###`nonnull(arg-index, ...)`

The nonnull attribute specifies that some function parameters should be non-null pointers. For instance, the declaration: 

    extern void *
    my_memcpy (void *dest, const void *src, size_t len)
            __attribute__((nonnull (1, 2)));

causes the compiler to check that, in calls to my_memcpy, arguments dest and src are non-null. If the compiler determines that a null pointer is passed in an argument slot marked as non-null, and the -Wnonnull option is enabled, a warning is issued. The compiler may also choose to make optimizations based on the knowledge that certain function arguments will never be null. 

If no argument index list is given to the nonnull attribute, all pointer arguments are marked as non-null. To illustrate, the following declaration is equivalent to the previous example: 

    extern void *
    my_memcpy (void *dest, const void *src, size_t len)
            __attribute__((nonnull));

****

#设计模式

##RAII

RAII(Resource acquisition is initialization)资源获取即初始化,它是一项很简单的技术,利用C++对象生命周期的概念来控制程序的资源,最简单的RAII形式是,创建这样一个对象:其构造函数获取一份资源,而析构函数则释放这份资源:

    Class Resource {……};
    Class ResourceHandle {
    Public:
    Explicit Resourcehandle (Resource * aResource ):r_( aResource ) //获取资源
    ~ ResourceHandle() {delete r_;} //释放资源
    Resource *get()    {return r_ ;} //访问资源
       Private:
         ResourceHandle (const ResourceHandle &);
    ResourceHandle & operator = (const ResourceHandle &);
         Resource * r_;
    }

----

ResourceHandle对象的最美妙之处在于,若它被声明为一个函数的局部变量,或作为函数的参数,或是一个静态对象,我们都可以保证析构函数会得到调用,从而释放对象所引用的资源.

----

###RAII与STL容器

STL容器是基于值语义的，在容器内部，对象是常被复制的。如果RAII类型需要存入STL容器，需要作一些处理  

    class Resource   
    {   
    public:   
    Resource() {/*分配资源*/}   
    ~ Resource() {/*释放资源*/}   
    private:   
    int handle;   
    };   
    std::map< Identifier, Resource > resourceMap;  

> 以上代码中STL容器对Resource的复制将导致运行期错误.

----


最好的方法是让RAII类型继承于boost::noncopyable[2]，而后在容器中使用引用计数的指针  

    class Resource : public boost::noncopyable   
    {   
    public:   
    Resource() {/*分配资源*/}   
    ~ Resource() {/*释放资源*/}   
    private:   
    int handle;   
    };   
    typedef boost::shared_ptr<Resource> PointerToResourceType;   
    typedef std::map< Identifier, PointerToResourceType> ResourceMapType;   
    ResourceMapType resourceMap;  

> 作为替代，还可以使用非拷贝行为的容器：boost::ptr_map<Identifier,Resource> map;

****

